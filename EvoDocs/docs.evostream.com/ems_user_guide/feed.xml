<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>EvoStream Media Server</title>
    <description>EvoStream, 1010 Turquoise, Suite 101, San Diego, CA 92109, California, USA.
</description>
    <link>http://docs.evostream.com/ems_user_guide/</link>
    <atom:link href="http://docs.evostream.com/ems_user_guide/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 19 Oct 2016 21:39:05 +0000</pubDate>
    <lastBuildDate>Wed, 19 Oct 2016 21:39:05 +0000</lastBuildDate>
    <generator>Jekyll v3.2.1</generator>
    
      <item>
        <title>EMS User Guide</title>
        <description>&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/introduction&quot;&gt;Introduction&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/introduction#document-definitions&quot;&gt;Document Definitions&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/introduction#purpose&quot;&gt;Purpose&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/introduction#evostream-media-server&quot;&gt;EvoStream Media Server&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/introduction#what-is-ems&quot;&gt;What is EMS?&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/introduction#why-use-ems&quot;&gt;Why Use EMS?&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/introduction#what-are-the-key-features-and-benefits-of-the-ems&quot;&gt;What are the Key Features and Benefits of the EMS?&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/introduction#how-does-the-ems-work&quot;&gt;How Does the EMS Work?&lt;/a&gt;
            &lt;ul&gt;
              &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/introduction#stream-routing&quot;&gt;Stream Routing&lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/introduction#where-will-ems-run&quot;&gt;Where will EMS Run?&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/installation&quot;&gt;Installation and Startup&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/installation#obtain-a-license&quot;&gt;Obtain a License&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/installation#install-ems&quot;&gt;Install EMS&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/installation#installation-for-linux-package&quot;&gt;Installation for Linux (Package)&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/installation#installation-for-linux-archive&quot;&gt;Installation for Linux (Archive)&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/installation#installation-for-windows&quot;&gt;Installation for WindowsÂ®&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/installation#other-installers&quot;&gt;Other Installers&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/installation#platform-verification&quot;&gt;Platform Verification&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/installation#linux-limitations&quot;&gt;Linux Limitations&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/installation#distribution-content&quot;&gt;Distribution Content&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/installation#linux-package&quot;&gt;Linux Package&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/installation#linux-archive&quot;&gt;Linux Archive&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/installation#windows-package&quot;&gt;Windows Package&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/installation#file-descriptions&quot;&gt;File Descriptions&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/installation#command-files&quot;&gt;Command Files&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/installation#configuration-files&quot;&gt;Configuration Files&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/installation#documentation&quot;&gt;Documentation&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/installation#miscellaneous&quot;&gt;Miscellaneous&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/startingserver&quot;&gt;Starting the Server&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/startingserver#linux-distributions-linux-aptyum-installer&quot;&gt;Linux Distributions (Linux apt/yum Installer)&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/startingserver#linux-mac-osx-and-bsd-distributions-targz-distribution&quot;&gt;Linux, Mac OSX and BSD Distributions (.tar.gz Distribution)&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/startingserver#windows-distribution&quot;&gt;Windows Distribution&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/startingserver#startup-success&quot;&gt;Startup Success&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/startingserver#ems-command-line-definition&quot;&gt;EMS Command Line Definition&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/emsbasics&quot;&gt;EMS Basics&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/emsbasics#streams&quot;&gt;Streams&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/emsbasics#config-files&quot;&gt;Config Files&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/emsbasics#lua&quot;&gt;LUA&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/emsbasics#ems-configuration-overview&quot;&gt;EMS Configuration Overview&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/emsbasics#ews-configuration-overview&quot;&gt;EWS Configuration Overview&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/emsbasics#video-compression&quot;&gt;Video Compression&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/emsbasics#production-logging&quot;&gt;Production Logging&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/emsbasics#debug-logging&quot;&gt;Debug Logging&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/emsbasics#log-accumulation&quot;&gt;Log Accumulation&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/runtimeapi&quot;&gt;Run-Time API&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/runtimeapi#accessing-the-run-time-api&quot;&gt;Accessing the Run-Time API&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/runtimeapi#manual-command-line&quot;&gt;Manual Command Line&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/runtimeapi#ascii-json-cli&quot;&gt;ASCII JSON CLI&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/runtimeapi#http&quot;&gt;HTTP&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/runtimeapi#configuring-and-receiving-event-notifications&quot;&gt;Configuring and Receiving Event Notifications&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/runtimeapi#sinks&quot;&gt;Sinks&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/runtimeapi#api-definition&quot;&gt;API Definition&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/runtimeapi#my-first-call-api&quot;&gt;My First Call API&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/runtimeapi#user-defined-variables&quot;&gt;User Defined Variables&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/runtimeapi#ems-demohtml&quot;&gt;EMS Demo.html&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/eventnotification&quot;&gt;Event Notification System&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/eventnotification#list-of-events&quot;&gt;List of Events&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/eventnotification#configuring-event-notifications&quot;&gt;Configuring Event Notifications&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/eventnotification#application-vs-server-events&quot;&gt;Application vs. Server Events&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/security&quot;&gt;Security and Authentication&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/security#stream-aliasing&quot;&gt;Stream Aliasing&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/security#alias-expired-period&quot;&gt;Alias Expired Period&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/security#common-alias-configuration&quot;&gt;Common Alias Configuration&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/security#group-name-aliasing&quot;&gt;Group Name Aliasing&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/security#inbound-authentication&quot;&gt;Inbound Authentication&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/security#outbound-authentication&quot;&gt;Outbound Authentication&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/security#client-authentication&quot;&gt;Client Authentication&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/security#encoderuser-agents&quot;&gt;Encoder/User Agents&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/protocolsupport&quot;&gt;Protocol Support and Specifics&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/protocolsupport#real-time-messaging-protocol-rtmp&quot;&gt;Real Time Messaging Protocol (RTMP)&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/protocolsupport#ingesting-rtmp&quot;&gt;Ingesting RTMP&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/protocolsupport#outbound-rtmp-live-and-vod&quot;&gt;Outbound RTMP (Live and VOD)&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/protocolsupport#rtmpt&quot;&gt;RTMPT&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/protocolsupport#rtmps&quot;&gt;RTMPS&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/protocolsupport#rtmp-ingest-points&quot;&gt;RTMP Ingest Points&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/protocolsupport#real-time-streaming-protocol-rtsp&quot;&gt;Real Time Streaming Protocol (RTSP)&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/protocolsupport#ingesting-rtsp&quot;&gt;Ingesting RTSP&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/protocolsupport#outbound-rtsp-live-and-vod&quot;&gt;Outbound RTSP (Live and VOD)&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/protocolsupport#mpeg-transport-stream-mpeg-ts&quot;&gt;MPEG Transport Stream (MPEG-TS)&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/protocolsupport#html5-web-sockets&quot;&gt;HTML5 Web Sockets&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/protocolsupport#html5-playback-browser-compatibility&quot;&gt;HTML5 Playback Browser Compatibility&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/protocolsupport#firefox-configuration-changes&quot;&gt;Firefox Configuration Changes&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/protocolsupport#http-live-streaming-hls&quot;&gt;HTTP Live Streaming (HLS)&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/protocolsupport#dvr-playback&quot;&gt;DVR Playback&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/protocolsupport#hls-resume&quot;&gt;HLS Resume&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/protocolsupport#audio-only-hls&quot;&gt;Audio Only HLS&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/protocolsupport#verimatrix-drm&quot;&gt;VeriMatrix DRM&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/protocolsupport#aes-encryption&quot;&gt;AES Encryption&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/protocolsupport#automatic-hls&quot;&gt;Automatic HLS&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/protocolsupport#http-dynamic-streaming-hds&quot;&gt;HTTP Dynamic Streaming (HDS)&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/protocolsupport#automatic-hds&quot;&gt;Automatic HDS&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/protocolsupport#dynamic-adaptive-streaming-over-http-dash&quot;&gt;Dynamic Adaptive Streaming over HTTP (DASH)&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/protocolsupport#automatic-dash&quot;&gt;Automatic DASH&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/protocolsupport#microsoft-smooth-streaming-mss&quot;&gt;Microsoft Smooth Streaming (MSS)&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/protocolsupport#automatic-mss&quot;&gt;Automatic MSS&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/protocolsupport#working-with-mss&quot;&gt;Working with MSS&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/protocolsupport#raw-rtp&quot;&gt;Raw RTP&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/protocolsupport#recording&quot;&gt;Recording&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/protocolsupport#video-on-demand-vod&quot;&gt;Video On Demand (VOD)&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/protocolsupport#pseudo-vod&quot;&gt;Pseudo-VOD&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/protocolsupport#peer-to-peer&quot;&gt;Peer to Peer&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/protocolsupport#getting-started-with-peer-to-peer&quot;&gt;Getting Started with Peer to Peer&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/protocolsupport#peer-to-peer-browser-compatibility&quot;&gt;Peer To Peer Browser Compatibility&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/protocolsupport#firefox-configuration-changes&quot;&gt;Firefox Configuration Changes&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/capabilities&quot;&gt;Capabilities&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/capabilities#lazy-pull---vod-files&quot;&gt;Lazy Pull - .vod Files&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/capabilities#server-side-playlists&quot;&gt;Server-Side Playlists&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/capabilities#playlist-file&quot;&gt;Playlist File&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/capabilities#playlist-playback&quot;&gt;Playlist Playback&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/capabilities#playlist-manipulation&quot;&gt;Playlist Manipulation&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/capabilities#dvr-playback&quot;&gt;DVR Playback&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/capabilities#transcoding&quot;&gt;Transcoding&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/capabilities#changing-stream-bitrates&quot;&gt;Changing Stream Bitrates&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/capabilities#using-different-codecs&quot;&gt;Using Different Codecs&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/capabilities#video-overlays--watermarking&quot;&gt;Video Overlays â Watermarking&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/capabilities#cropping&quot;&gt;Cropping&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/capabilities#vod-file-redirection&quot;&gt;VOD File Redirection&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/capabilities#metadata&quot;&gt;Metadata&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/capabilities#ingestion-and-aggregation&quot;&gt;Ingestion and Aggregation&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/capabilities#metadata-delivery&quot;&gt;Metadata Delivery&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/webserver&quot;&gt;EvoStream Web Server&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/webserver#http-media-delivery&quot;&gt;HTTP Media Delivery&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/webserver#http-streaming-sessions&quot;&gt;HTTP Streaming Sessions&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/webserver#group-name-aliasing&quot;&gt;Group Name Aliasing&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/webserver#api-proxy-authentication&quot;&gt;API Proxy Authentication&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/webserver#white-and-black-lists&quot;&gt;White and Black Lists&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/webserver#ews-specific-events&quot;&gt;EWS Specific Events&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/emswebservices&quot;&gt;EMS Web Services&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/emsuserinterface&quot;&gt;EMS User Interface&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/emsconfigfile&quot;&gt;EMS Configuration File&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/emsconfigfile#config-lua&quot;&gt;config.lua&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/emsconfigfile#logappenders&quot;&gt;logAppenders&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/emsconfigfile#applications&quot;&gt;applications&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/emsconfigfile#application-definition&quot;&gt;application Definition&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/emsconfigfile#media&quot;&gt;media&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/emsconfigfile#acceptors&quot;&gt;acceptors&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/emsconfigfile#autohlshdsdashmss&quot;&gt;autoHLS/HDS/DASH/MSS&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/emsconfigfile#authentication&quot;&gt;authentication&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/emsconfigfile#eventlogger&quot;&gt;eventLogger&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/emsconfigfile#event-sinks&quot;&gt;Event Sinks&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/emsconfigfile#transcoder&quot;&gt;Transcoder&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/emsconfigfile#drm&quot;&gt;drm&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/webconfigfile#webconfig-lua&quot;&gt;webconfig.lua&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/webconfigfile#logappenders&quot;&gt;logAppenders&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/webconfigfile#applications&quot;&gt;applications&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/webconfigfile#webserver-application&quot;&gt;webServer Application&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/webconfigfile#supportedmimetypes&quot;&gt;supportedMimeTypes&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/webconfigfile#includeresponseheaders&quot;&gt;includeResponseHeaders&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/webconfigfile#apiproxy&quot;&gt;apiProxy&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/webconfigfile#authentication&quot;&gt;authentication&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/webconfigfile#pushpullsetupxml&quot;&gt;pushPullSetup.xml&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/webconfigfile#connlimitsxml&quot;&gt;connLimits.xml&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/webconfigfile#userslua-authentication&quot;&gt;users.lua (Authentication)&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/webconfigfile#authxml&quot;&gt;auth.xml&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/webconfigfile#bandwidthsxml&quot;&gt;bandwidths.xml&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/webconfigfile#blacklisttxt&quot;&gt;blacklist.txt&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/webconfigfile#whitelisttxt&quot;&gt;whitelist.txt&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/webconfigfile#ingestpointsxml&quot;&gt;ingestpoints.xml&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/webconfigfile#servercert&quot;&gt;server.cert&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/webconfigfile#serverkey&quot;&gt;server.key&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/interoperability&quot;&gt;Interoperability&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/interoperability#stream-sources&quot;&gt;Stream Sources&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/interoperability#stream-players&quot;&gt;Stream Players&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/interoperability#akamai&quot;&gt;Akamai&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/interoperability#other-cdns&quot;&gt;Other CDNs&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://docs.evostream.com/ems_user_guide/interoperability#miscellaneous-examples&quot;&gt;Miscellaneous Examples&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Fri, 01 Jan 2016 01:01:01 +0000</pubDate>
        <link>http://docs.evostream.com/ems_user_guide/table_of_contents</link>
        <guid isPermaLink="true">http://docs.evostream.com/ems_user_guide/table_of_contents</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>EvoStream Web Server</title>
        <description>&lt;p&gt;The EvoStream Web Server (EWS) provides web server functionality for HTTP streaming with the EvoStream Media Server (EMS), for servicing HTTP requests from the EMS Web Interface, for authenticating or filtering HTTP clients, and for providing SSL/TLS encryption for secure HTTP connections. The EWS provides support for ranged requests and connections over both HTTP and HTTPS. A PHP engine is also provided as part of the base package for serving PHP and Javascript websites (including the EMS Web Interface).&lt;/p&gt;

&lt;h2 id=&quot;http-media-delivery&quot;&gt;HTTP Media Delivery&lt;/h2&gt;

&lt;p&gt;The EWS is used mainly for the HTTP delivery of HLS, DASH and other HTTP based protocols. The core EMS engine will create the stream files on disk and place them into the EWS webroot directory. Clients then connect to the EWS to get the files via HTTP Get requests.&lt;/p&gt;

&lt;h2 id=&quot;http-streaming-sessions&quot;&gt;HTTP Streaming Sessions&lt;/h2&gt;

&lt;p&gt;The EWS is capable of tracking individual streaming sessions as clients playback the various files associated with HLS, DASH, MSS and HDS. &lt;strong&gt;&lt;em&gt;This allows users to get a single event notification for a player streaming session.&lt;/em&gt;&lt;/strong&gt; Sessions are tracked by both content (sequential downloads from same stream) origin IP address and time. If after 3 times &lt;code class=&quot;highlighter-rouge&quot;&gt;chunkLength&lt;/code&gt; seconds have passed without an additional download from the origin IP on the same media stream, an end of session notification (&lt;code class=&quot;highlighter-rouge&quot;&gt;streamingSessionEnded&lt;/code&gt; event) will be sent.&lt;/p&gt;

&lt;h2 id=&quot;group-name-aliasing&quot;&gt;Group Name Aliasing&lt;/h2&gt;

&lt;p&gt;The EWS supports group name aliasing, a feature that provide a means to protect or hide streams on the HTTP protocol. There are EWS APIs to create, remove and give details on existing group name aliases. As with stream aliases, group name aliases can only be used once. To enable group name aliasing, the &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;hasGroupNameAliases&lt;/code&gt;&lt;/strong&gt; option in the EWS configuration (webconfig.lua) should be set to true. When this option is set to true, the group names can no longer be used, only aliases can be accessed by client requests.&lt;/p&gt;

&lt;h2 id=&quot;api-proxy-authentication&quot;&gt;API Proxy Authentication&lt;/h2&gt;

&lt;p&gt;Proxy authentication provides a way to secure the HTTP based EMS API. All API commands will first pass through the EWS, which will validate the provided username and password, and then pass the commands to the EMS for processing. API command return values will be routed back to the caller appropriately.&lt;/p&gt;

&lt;p&gt;To enable Proxy Authentication you will open the webconfig.lua config file and uncomment the &lt;code class=&quot;highlighter-rouge&quot;&gt;apiProxy&lt;/code&gt; section near the bottom of the file.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;See apiProxy under webconfig.lua for more details.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;white-and-black-lists&quot;&gt;White and Black Lists&lt;/h2&gt;

&lt;p&gt;The EWS can allow or disallow access to files based upon defined white lists or black lists.Â  If a whitelist is specified, access will only be granted when the HTTP request originates from an IP on the whitelist.Â Conversely, if a blacklist is specified, access will be granted to anyoriginating IP unless that IP appears on the blacklist.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;See blacklist and whitelist under Configuration Files for more details.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;ews-specific-events&quot;&gt;EWS Specific Events&lt;/h2&gt;

&lt;p&gt;Event notifications are covered in detail elsewhere, but it is relevant to recap the specific events that are generated by the EWS.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;&lt;strong&gt;Event&lt;/strong&gt;&lt;/th&gt;
      &lt;th&gt;&lt;strong&gt;Function&lt;/strong&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;streamingSessionStarted&lt;/td&gt;
      &lt;td&gt;Generated right after an HTTP streaming session has started.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;streamingSessionEnded&lt;/td&gt;
      &lt;td&gt;Generated right after an HTTP streaming session has stopped.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;fileDownloaded&lt;/td&gt;
      &lt;td&gt;Generated right after an HTTP file download has completed.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;em&gt;See Event Notification System for more details.&lt;/em&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
        <link>http://docs.evostream.com/ems_user_guide/webserver</link>
        <guid isPermaLink="true">http://docs.evostream.com/ems_user_guide/webserver</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>Web Server Configuration File</title>
        <description>&lt;h2 id=&quot;webconfiglua&quot;&gt;webconfig.lua&lt;/h2&gt;

&lt;p&gt;This file contains the EvoStream Web Server (EWS) configuration. The locations of various web server files/folders can be changed here. Various web server settings such as HTTP port, group name aliases, mime types, etc. can be modified here also.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Contents&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;configuration â This is the entire structure for all configuration needed by the EWS Server.&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  configuration =
  {
      logAppenders
      {
          -- content removed for clarity
      },
      applications =
      {
          -- content removed for clarity
      }
  }
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;webServer Configuration Structure Table:&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Key&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Type&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Mandatory&lt;/th&gt;
      &lt;th&gt;Description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;logAppenders&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;object&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;yes&lt;/td&gt;
      &lt;td&gt;Will hold a collection of log appenders. Each log message will be sent to each of the log appenders enumerated in this configuration section.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;applications&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;object&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;yes&lt;/td&gt;
      &lt;td&gt;Will hold a collection of loaded applications. Besides that, it will also hold some other values.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;When the web server starts, the following sequence of operations is performed:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;logAppenders&lt;/code&gt; value is read. This is where all log appenders are configured and brought up to running state. Depending on the collection of your log appenders, you may (not) see further log messages.&lt;/li&gt;
  &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;applications&lt;/code&gt; valueis taken into consideration. After this stage completes, all the applications are fully functional and the server is online and ready to do stuff.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;logappenders&quot;&gt;logAppenders&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;logAppenders =
{
    {
        name=&quot;console appender&quot;,
        type=&quot;coloredConsole&quot;,
        level=6
    },
    {
        name=&quot;file appender&quot;,
        type=&quot;file&quot;,
        level=6,
        fileName=&quot;../logs/evo-webserver&quot;,
        newLineCharacters=&quot;\n&quot;,
        fileHistorySize=100,
        fileLength=1024*1024,
        singleLine=true,
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This section contains a list of log appenders. The entire collection of appenders listed in this section is loaded inside the logger at config-time. All log messages will be than passed to all these log appenders. Depending on the log level, an appender may (or may not) log the message. âLoggingâ a message means âsavingâ it on the specified âmediaâ (in the example below we have a console appender and a file).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;webServer logAppenders Structure Table:&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Key&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Type&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Mandatory&lt;/th&gt;
      &lt;th&gt;Description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;name&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;string&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;yes&lt;/td&gt;
      &lt;td&gt;The name of the appender. It is usually used inside pretty print routines.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;type&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;string&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;yes&lt;/td&gt;
      &lt;td&gt;The type of the appender. It can be âconsoleâ, âcoloredConsoleâ or âfileâ. Types âconsoleâ and âcoloredConsoleâ will output to the console. The difference between them is that âcoloredConsoleâ will also apply a color to the message, depending on the log level. Quite useful when eye-balling the console. Type âfileâ log appender will output everything to the specified file.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;level&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;number&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;yes&lt;/td&gt;
      &lt;td&gt;The log level used. The values are presented just below. Any message having a log level less or equal to this value will be logged. The rest are discarded. (&lt;strong&gt;Log levels:&lt;/strong&gt; 0 FATAL, 1 ERROR, 2 WARNING, 3 INFO, 4 DEBUG, 5 FINE, 6 FINEST, -1 disable logs)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;fileName&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;string&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;yes&lt;/td&gt;
      &lt;td&gt;If the type of appender is a file, this will contain the path of the file.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;newLineCharacters&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;string&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;no&lt;/td&gt;
      &lt;td&gt;Newline character used in the file appender.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;fileHistorySize&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;number&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;no&lt;/td&gt;
      &lt;td&gt;The maximum number of log files to be retained. The oldest log file will be deleted first if this number is exceeded.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;fileLength&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;number&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;no&lt;/td&gt;
      &lt;td&gt;Buffer size of the file appender.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;singleLine&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;boolean&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;no&lt;/td&gt;
      &lt;td&gt;If yes, multi-line log messages are merged into one line.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;applications&quot;&gt;applications&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;applications =
{
    rootDirectory = &quot;./&quot;,
    {
        name=&quot;webserver&quot;,
        -- settings for application
        -- content removed for clarity
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This section is where all the applications inside the server are placed. It holds the attributes of each application that the server will use to launch them. Each application may have specific attributes that it requires to execute its own functionality.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;webServer application Structure Table&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Key&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Type&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Mandatory&lt;/th&gt;
      &lt;th&gt;Description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;rootDirectory&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;string&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;True&lt;/td&gt;
      &lt;td&gt;The folder containing applications subfolders. If this path begins with a â/â or â&quot; (depending on the OS), then is treated as an absolute path. Otherwise is treated as a path relative to the run-time directory (the place where you started the server).&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Following the rootDirectory, there is webserver application. This application has its properties contained in an object. See details below.&lt;/p&gt;

&lt;h3 id=&quot;webserver-application&quot;&gt;webServer Application&lt;/h3&gt;

&lt;p&gt;This is where the settings of the webserver application are defined.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;applications=
{
    rootDirectory=&quot;./&quot;,
    {
        name=&quot;webserver&quot;,
        description=&quot;Built-In Web Server&quot;,
        port=8888,
        emsPort=1113 --should match config.lua's inboundBinVariant acceptor
        bindToIP=&quot;&quot;,
        sslMode=&quot;disabled&quot;, -- always, auto, disabled
        maxMemSizePerConnection=32*1024, --32*1024,
        maxConcurrentConnections=5000,
        connectionTimeout=0, -- 0 - no timeout
        maxConcurrentConnectionsSameIP=1000,
        threadPoolSize=8,
        useIPV6=false,
        enableIPFilter=false, --if true, reads white and black lists
        whitelistFile=&quot;..\\config\\whitelist.txt&quot;,
        blacklistFile=&quot;..\\config\\blacklist.txt&quot;,
        sslKeyFile=&quot;..\\config\\server.key&quot;,
        sslCertFile=&quot;..\\config\\server.cert&quot;,
        enableCache=false,
        cacheSize=1*1024*1024*1024, --1GB
        hasGroupNameAliases=false,
        webRootFolder=&quot;..\\evo-webroot&quot;,
        enableRangeRequests=true,
        mediaFileDownloadTimeout=30,
        supportedMimeTypes=
        {
            --content removed for clarity
        }
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;webServer application Structure Table&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Key&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Type&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Mandatory&lt;/th&gt;
      &lt;th&gt;Description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;name&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;string&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Yes&lt;/td&gt;
      &lt;td&gt;Name of the web server application.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;description&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;string&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;No&lt;/td&gt;
      &lt;td&gt;Describes the web server application.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;port&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;number&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Yes&lt;/td&gt;
      &lt;td&gt;The web server listens to this port.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;emsPort&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;number&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Yes&lt;/td&gt;
      &lt;td&gt;Should match inboundBinVariant acceptor in config.lua.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;bindToIP&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;string&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;No&lt;/td&gt;
      &lt;td&gt;The specific IP to use when the host has multiple Ethernet cards.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;sslMode&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;string&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Yes&lt;/td&gt;
      &lt;td&gt;Allowed values are âalwaysâ, âautoâ and âdisabledâ. âalwaysâ forces HTTPS. âautoâ checks for HTTPS first, falls back to HTTPS otherwise. âdisabledâ uses HTTP.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;maxMemSizePerConnection&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;number&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;No&lt;/td&gt;
      &lt;td&gt;Allowable maximum bytes for transmission.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;maxConcurrentConnections&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;number&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;No&lt;/td&gt;
      &lt;td&gt;Allowable simultaneous connections.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;connectionTimeout&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;number&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;No&lt;/td&gt;
      &lt;td&gt;The number of seconds before a pending request times out. This applies if the value is greater than 0. If value is 0 then there is no timeout.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;maxConcurrentConnectionsSameIP&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;number&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;No&lt;/td&gt;
      &lt;td&gt;Allowable simultaneous connections per IP.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;threadPoolSize&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;number&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;No&lt;/td&gt;
      &lt;td&gt;The number of threads handling the requests. It is suggested that it should be 2 times the number of physical processors.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;useIPV6&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;boolean&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;No&lt;/td&gt;
      &lt;td&gt;Use IP v6 (true) or IP v4 (false).&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;enableIPFilter&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;boolean&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;No&lt;/td&gt;
      &lt;td&gt;If true, reads white and black lists.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;whitelistFile&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;string&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;No&lt;/td&gt;
      &lt;td&gt;Contains a list of allowed IPs. Uses new line delimiter.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;blacklistFile&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;string&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;No&lt;/td&gt;
      &lt;td&gt;Contains a list of blocked IPs. Uses new line delimiter.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;sslKeyFile&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;string&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;No&lt;/td&gt;
      &lt;td&gt;Key file used when using HTTPS.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;sslCertFile&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;string&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;No&lt;/td&gt;
      &lt;td&gt;Cert file used when using HTTPS.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;enableCache&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;boolean&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;No&lt;/td&gt;
      &lt;td&gt;Enables internal caching of static files.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;cacheSize&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;number&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;No&lt;/td&gt;
      &lt;td&gt;Size of cache.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;hasGroupNameAliases&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;boolean&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;no&lt;/td&gt;
      &lt;td&gt;Protects HTTP streaming variants (HLS, HDS, MSS, DASH, media files) from direct access&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;webRootFolder&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;string&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Yes&lt;/td&gt;
      &lt;td&gt;The web root folder.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;enableRangeRequests&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;boolean&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;No&lt;/td&gt;
      &lt;td&gt;Enables range requests support (HTTP 206 Partial-Content)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;mediaFileDownloadTimeout&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;number&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Yes&lt;/td&gt;
      &lt;td&gt;A media file download session is ended when there is no subsequent request after X seconds&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;includeResponseHeaders&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;object&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;No&lt;/td&gt;
      &lt;td&gt;Additional headers to be included in the response&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;supportedmimetypes&quot;&gt;supportedMimeTypes&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    supportedMimeTypes=
    {
        -- non-streaming
        {
            extensions=&quot;mp4,mp4v,mpg4&quot;,
            mimeType=&quot;video/mp4&quot;,
            streamType=&quot;&quot;,
            isManifest=false,
        },
        -- content removed for clarity
        -- streaming
        {
            extensions=&quot;m3u,m3u8&quot;,
            mimeType=&quot;audio/x-mpegurl&quot;,
            streamType=&quot;hls&quot;,
            isManifest=true,
        },
        -- content removed for clarity
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;This section is used to indicate file extension associations to mime types.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;webServer supportedMime Types Structure Table:&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Key&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Type&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Mandatory&lt;/th&gt;
      &lt;th&gt;Description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;extensions&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;string&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;yes&lt;/td&gt;
      &lt;td&gt;File extensions to be associated.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;mimeType&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;string&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;yes&lt;/td&gt;
      &lt;td&gt;The mime type associated with the specified file extensions.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;streamType&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;string&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;no&lt;/td&gt;
      &lt;td&gt;The type of HTTP stream.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;isManifest&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;boolean&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;no&lt;/td&gt;
      &lt;td&gt;Indicates if a file is a manifest used with the HTTP streaming variant.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;includeresponseheaders&quot;&gt;includeResponseHeaders&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    includeResponseHeaders=
    {
        {
            header=&quot;Access-Control-Allow-Origin&quot;,
            content=&quot;*&quot;,
            override=true,
        },
        {
            header=&quot;User-Agent&quot;,
            content=&quot;Evostream&quot;,
            override=false,
        },
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;This section indicates additional headers to be included in the response.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;webServer includeResponseHeaders Structure Table:&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Key&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Type&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Mandatory&lt;/th&gt;
      &lt;th&gt;Description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;header&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;string&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;yes&lt;/td&gt;
      &lt;td&gt;The response header.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;content&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;string&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;yes&lt;/td&gt;
      &lt;td&gt;The value particular to the response header.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;override&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;boolean&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;No&lt;/td&gt;
      &lt;td&gt;Indicates if the header should be overridden if the existing header has this already included.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;apiproxy&quot;&gt;apiProxy&lt;/h3&gt;

&lt;p&gt;Proxy authentication provides a way to secure the HTTP based EMS API. All API commands will first pass through the EWS, which will validate the provided username and password, and then pass the commands to the EMS for processing. API command return values will be routed back to the caller appropriately.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;apiProxy=
{
    authentication=&quot;basic&quot;, -- none, basic
    pseudoDomain=&quot;&amp;lt;domain&amp;gt;&quot;,
    address=&quot;127.0.0.1&quot;,
    port=7777,
    userName=&quot;&amp;lt;username&amp;gt;&quot;,
    password=&quot;&amp;lt;password&amp;gt;&quot;,
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;To enable Proxy Authentication you will open the &lt;em&gt;webconfig.lua&lt;/em&gt; config file and uncomment the âapiProxyâ section near the bottom of the file.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;webServer apiProxy Structure Table:&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Key&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Type&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Mandatory&lt;/th&gt;
      &lt;th&gt;Description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;authentication&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;object&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;yes&lt;/td&gt;
      &lt;td&gt;The type of authentication. Currently, there are only 2 available values: âbasicâ which is basic HTTP authentication that uses a username and password; and ânoneâ which disables authentication.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;pseudoDomain&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;object&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;yes&lt;/td&gt;
      &lt;td&gt;The domain name or folder&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;address&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;number&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;yes&lt;/td&gt;
      &lt;td&gt;The address using the inboundHTTPJsonCLI&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;port&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;number&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;yes&lt;/td&gt;
      &lt;td&gt;Port, referring to the config.luaâs acceptors for inboundHTTPJsonCLI&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;userName&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;string&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;No&lt;/td&gt;
      &lt;td&gt;Basic authentication username&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;password&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;string&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;No&lt;/td&gt;
      &lt;td&gt;Password for the userName&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Once enabled, new API calls using Proxy Authentication will be formatted as follows:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http://userName:password@EWS_IP:EWS_PORT/pseudoDomain/command?params=â¦
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Note: The EWS_PORT above is defined in webconfig.lua under applications &amp;gt; rootDirectory &amp;gt; port.&lt;/p&gt;

&lt;p&gt;Hereâs an example with parameters:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http://user1:pass1@localhost:8888/apiproxy/pullstream?params=dXJpPXJ0bXA6Ly9zdHJlYW1pbmcuY2l0eW9mYm9zdG9uLmdvdi9saXZlL2NhYmxlIGxvY2Fsc3RyZWFtbmFtZT1zdHJlYW0x
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Hereâs an example without parameters:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http://user1:pass1@localhost:8888/apiproxy/version
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;authentication&quot;&gt;authentication&lt;/h3&gt;
&lt;p&gt;The authentication settings for the EMS Web UI. This is disabled for non-Amazon EMS packages.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;auth=
{
  {
    domain=&quot;EMS_Web_UI&quot;, --the domain folder
    digestFile=&quot;../evo-webroot/EMS_Web_UI/settings/passwords/.htdigest&quot;, --relative path to digest file
    enable=false,
  },
},
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;To enable the EMS Web UI Authentication you will open the webconfig.lua config file and change âenableâ value to âtrueâ.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Key&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Type&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Mandatory&lt;/th&gt;
      &lt;th&gt;Description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;domain&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;object&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;yes&lt;/td&gt;
      &lt;td&gt;The domain name or folder&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;digestFile&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;object&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;yes&lt;/td&gt;
      &lt;td&gt;The relative path to digest file&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;enable&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;boolean&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;yes&lt;/td&gt;
      &lt;td&gt;Tells if the authentication is enabled or disabled&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;If enabled, the Authentication window will open if the EMS Web UI is accessed.
See http://docs.evostream.com/ems_web_ui_user_guide/authentication for more details.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;pushpullsetupxml&quot;&gt;pushPullSetup.xml&lt;/h2&gt;

&lt;p&gt;This file is used when reconnecting to the stream after restarting the EMS server and is automatically updated when a stream is created or deleted. If the file does not exist (or when itâs deleted), it will be generated automatically by EMS.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; ?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;MAP&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;isArray=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;false&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;STR&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;checksum&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;9d4782e9efeab7bd51c6f64ffcb83af3&lt;span class=&quot;nt&quot;&gt;&amp;lt;/STR&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;MAP&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;isArray=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;dash&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;MAP&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;isArray=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hds&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;MAP&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;isArray=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hls&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;MAP&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;isArray=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;mss&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;MAP&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;isArray=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;process&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;MAP&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;isArray=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;pull&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;MAP&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;isArray=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;push&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;MAP&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;isArray=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;record&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;MAP&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;isArray=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;false&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;serverVersion&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;STR&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;banner&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;EvoStream Media Server (www.evostream.com) version 1.7.0 build 4260 with hash: f72e39b26867edaeb15744390e53d2d87c34acea on branch: origin/release/1.7.0 - PacMan|m| - (built for Windows-8.1-x86_64 on 2015-11-25T07:51:34.000)&lt;span class=&quot;nt&quot;&gt;&amp;lt;/STR&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;STR&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;branchName&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;origin/release/1.7.0&lt;span class=&quot;nt&quot;&gt;&amp;lt;/STR&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;STR&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;buildDate&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;2015-11-25T07:51:34.000&lt;span class=&quot;nt&quot;&gt;&amp;lt;/STR&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;STR&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;buildNumber&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;4260&lt;span class=&quot;nt&quot;&gt;&amp;lt;/STR&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;STR&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;codeName&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;PacMan|m|&lt;span class=&quot;nt&quot;&gt;&amp;lt;/STR&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;STR&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hash&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;f72e39b26867edaeb15744390e53d2d87c34acea&lt;span class=&quot;nt&quot;&gt;&amp;lt;/STR&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;STR&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;releaseNumber&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;1.7.0&lt;span class=&quot;nt&quot;&gt;&amp;lt;/STR&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/MAP&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;UINT32&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;version&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;26&lt;span class=&quot;nt&quot;&gt;&amp;lt;/UINT32&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;MAP&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;isArray=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;webrtc&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/MAP&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;connlimitsxml&quot;&gt;connLimits.xml&lt;/h2&gt;

&lt;p&gt;This file sets the allowed maximum number of connections to EMS.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; ?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;UINT32&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;0&lt;span class=&quot;nt&quot;&gt;&amp;lt;/UINT32&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;userslua-authentication&quot;&gt;users.lua (Authentication)&lt;/h2&gt;

&lt;p&gt;users.lua contains the user names and passwords to be used in authentication.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;users=
{
    user1=&quot;password1&quot;,
    user2=&quot;password2&quot;,
}
realms=
{
    {
        name=&quot;EVOSTREAM stream router&quot;,
        method=&quot;Digest&quot;,
        users={
            &quot;user1&quot;,
            &quot;user2&quot;,
        },
    },
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;authxml&quot;&gt;auth.xml&lt;/h2&gt;

&lt;p&gt;The configuration for the authentication. If true, the authentication declared in users.lua will be read before the streaming starts.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; ?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;BOOL&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;true&lt;span class=&quot;nt&quot;&gt;&amp;lt;/BOOL&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;bandwidthsxml&quot;&gt;bandwidths.xml&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; ?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;MAP&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;isArray=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;false&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;DOUBLE&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;in&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;0.000&lt;span class=&quot;nt&quot;&gt;&amp;lt;/DOUBLE&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;DOUBLE&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;out&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;0.000&lt;span class=&quot;nt&quot;&gt;&amp;lt;/DOUBLE&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/MAP&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;If &lt;code class=&quot;highlighter-rouge&quot;&gt;enableCheckBandwidth&lt;/code&gt; in config.lua is true, automatically EMS will read the bandwidths.xml file. EMS will limit all the incoming and outgoing stream dependent to the configured bandwidth range.&lt;/p&gt;

&lt;h2 id=&quot;blacklisttxt&quot;&gt;blacklist.txt&lt;/h2&gt;

&lt;p&gt;The EWS can allow or disallow access to files based upon defined white lists or black lists. If a blacklist is specified, access will only be granted to an IP if that IP address does &lt;strong&gt;not&lt;/strong&gt; appear on the blacklist.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;enableIPFilter&lt;/code&gt;  should be set to &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt; to be able to read the blacklist file.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;blacklistFile&lt;/code&gt; should not be commented to be able to honor the list of blacklisted IP address&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If IP address is both on whitelist and blacklist file, EMS will treat the IP address as blacklisted&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  enableIPFilter=true,
  whitelistFile=&quot;..\\config\\whitelist.txt&quot;,
  blacklistFile=&quot;..\\config\\blacklist.txt&quot;,
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;whitelisttxt&quot;&gt;whitelist.txt&lt;/h2&gt;

&lt;p&gt;The EWS can allow or disallow access to files based upon defined white lists or black lists. If a whitelist is specified, access will only be granted when the HTTP request originates from an IP on the whitelist.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;enableIPFilter&lt;/code&gt;  should be set to &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt; to be able to read the whitelist file.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;whitelistFile&lt;/code&gt; should not be commented to be able to honor the list of blacklisted IP address&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If IP address is both on whitelist and blacklist file, EMS will treat the IP address as blacklisted&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  enableIPFilter=true,
  whitelistFile=&quot;..\\config\\whitelist.txt&quot;,
  blacklistFile=&quot;..\\config\\blacklist.txt&quot;,
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;ingestpointsxml&quot;&gt;ingestpoints.xml&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; ?&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;MAP&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;isArray=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;false&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/MAP&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;servercert&quot;&gt;server.cert&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-----BEGIN CERTIFICATE-----
MIICXAIBAAKBgQCwVGvra2hX2utJnriY89Wq0bsUrotH6wFlIoXbP7u5EEwKiqet
KCpVM/N34MI3wiLXbbRQUmFELtLhzhp6NFZz1PIQgl67bYiYUJ1MHcbEeZMLVely
:
VQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTESMBAGA1UEBwwJU2FuIERpZWdv
sjiyBNWZUq1pE3x0RnTpUA==
-----END CERTIFICATE-----
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;serverkey&quot;&gt;server.key&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-----BEGIN RSA PRIVATE KEY-----
MIIDDDCCAnWgAwIBAgIJAOh9kCLgEMuhMA0GCSqGSIb3DQEBBQUAMIGeMQswCQYD
OhB70/IVC3pfS8eq9KkCQDr4ATT8i8IQyJGerJ47mx2/LhL1ZwqykqBQFW8Xyni7
:
vZxkUbeVxJtfdoS0OIHf+xiugYBY33G3odSL7ZISkHT5VeDbXtBJ2kaYcMXUTlh3
GVOnuh7pX19wgj2VZv2Mz4HvKggPvXlS/WKtPFYsqsw=
-----END RSA PRIVATE KEY-----
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Note:
Scripts are available for creating certificates and keys for EMS. Please refer to our GitHub files &lt;a href=&quot;https://github.com/EvoStream/evostream_addons/tree/master/certificates_and_keys&quot;&gt;here&lt;/a&gt; for details.&lt;/p&gt;
</description>
        <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
        <link>http://docs.evostream.com/ems_user_guide/webconfigfile</link>
        <guid isPermaLink="true">http://docs.evostream.com/ems_user_guide/webconfigfile</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>Starting the Server</title>
        <description>&lt;h3 id=&quot;linux-distributions-linux-aptyum-installer&quot;&gt;Linux Distributions (Linux apt/yum Installer)&lt;/h3&gt;

&lt;p&gt;Running the EMS after installation is as simple as starting the EMS service:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# service evostreamms start
# service evostreamms stop
# service evostreamms restart
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The EMS can also be run in console mode:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# service evostreamms start_console
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;linux-mac-osx-and-bsd-distributions-targz-distribution&quot;&gt;Linux, Mac OSX and BSD Distributions (.tar.gz Distribution)&lt;/h3&gt;

&lt;p&gt;There are two ârunâ scripts that can be used to start the EvoStream Media Server:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Run EMS with console logs, using &lt;code class=&quot;highlighter-rouge&quot;&gt;config/config.lua&lt;/code&gt; as the main server configuration.&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; $ ./run_console_ems.sh
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Run EMS as a background process. The script will attempt to assign the run-process to the user &lt;code class=&quot;highlighter-rouge&quot;&gt;evostream&lt;/code&gt;.&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; $ ./run_daemon_ems.sh
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Notes:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Either command can be directly executed.&lt;/li&gt;
  &lt;li&gt;For &lt;code class=&quot;highlighter-rouge&quot;&gt;run_daemon_ems.sh&lt;/code&gt;, if the &lt;code class=&quot;highlighter-rouge&quot;&gt;evostream&lt;/code&gt; user does not exist, an error will be printed to the screen. Despite the error, the EMS will probably have been started. To check if the server is running, user can issue &lt;code class=&quot;highlighter-rouge&quot;&gt;ps âef | grep evostream&lt;/code&gt; in terminal.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This command will print differently on different operating systems, but it should let you know that the server is running.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The &lt;strong&gt;user&lt;/strong&gt; used by &lt;code class=&quot;highlighter-rouge&quot;&gt;run_daemon_ems.sh&lt;/code&gt; can easily be modified by changing the value after the &lt;code class=&quot;highlighter-rouge&quot;&gt;-u&lt;/code&gt; in the script itself.&lt;/li&gt;
  &lt;li&gt;The user running the EvoStream Media Server must have sufficient permission to open and bind to network ports.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;windows-distribution&quot;&gt;Windows Distribution&lt;/h3&gt;

&lt;p&gt;The EMS may be started and stopped using the &lt;strong&gt;Windows Services&lt;/strong&gt; tool in Windows.&lt;/p&gt;

&lt;p&gt;User may directly run the EMS using the shortcut icon if added during installation, or the batch file for running the server in a command prompt:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;C:\EvoStream\&amp;gt; run_console_ems.bat
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This script simply runs the Media Server through the command prompt, using &lt;code class=&quot;highlighter-rouge&quot;&gt;config/config.lua&lt;/code&gt; as the main server configuration. This file can also be double-clicked to start the server. The EvoStream Media Server icon on the desktop can also be double-clicked to do the same thing.&lt;/p&gt;

&lt;p&gt;There are other scripts that can be used to create and manipulate the server as a WindowsÂ® Service. These scripts need to be run as an administrator. User can verify they have worked by opening the Windows Services tool and looking for the EMS service.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;C:\EvoStream\services\ems\create.bat&lt;/code&gt; : Creates and starts the Windows service&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;C:\EvoStream\services\ems\remove.bat&lt;/code&gt; : Removes the Windows service&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;C:\EvoStream\services\ems\start.bat&lt;/code&gt; : Starts the service if it has not already been started&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;C:\EvoStream\services\ems\stop.bat&lt;/code&gt; : Stops the service if it is currently running&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;startup-success&quot;&gt;Startup Success&lt;/h3&gt;

&lt;p&gt;For either Windows or Linux/BSD/OSX, when you run the EMS as a console application, you should see the following screen indicating the server is up and running:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/ems_user_guide/assets/start1.png&quot; alt=&quot;START-FIG1&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;ems-command-line-definition&quot;&gt;EMS Command Line Definition&lt;/h3&gt;

&lt;p&gt;The evostreamms executable can be run with a few different options. The command line signature is as follows:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Format:&lt;/strong&gt; evostreamms [OPTIONS] [config_file_path]&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Command&lt;/th&gt;
      &lt;th&gt;Function&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;âhelp&lt;/td&gt;
      &lt;td&gt;Prints this help and exit.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;âversion&lt;/td&gt;
      &lt;td&gt;Prints the version and exit.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;âuse-implicit-console-appender&lt;/td&gt;
      &lt;td&gt;Adds extra logging at runtime, but is only effective when the server is started as a console application. This is particularly useful when the server starts and stops immediately for an unknown reason. It will allow you users to see if something is wrong, particularly with the config file.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;âdaemon&lt;/td&gt;
      &lt;td&gt;Overrides the daemon setting inside the config file and forces the server to start in daemon mode.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;âuid=&lt;uid&gt;&lt;/uid&gt;&lt;/td&gt;
      &lt;td&gt;Run the process with the specified user id.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;âgid=&lt;gid&gt;&lt;/gid&gt;&lt;/td&gt;
      &lt;td&gt;Run the process with the specified group id.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;âpid=&amp;lt;pid_file&amp;gt;&lt;/td&gt;
      &lt;td&gt;Create PID file. Works only if âdaemon option is specified.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

</description>
        <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
        <link>http://docs.evostream.com/ems_user_guide/startingserver</link>
        <guid isPermaLink="true">http://docs.evostream.com/ems_user_guide/startingserver</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>Security and Authentication</title>
        <description>&lt;h3 id=&quot;stream-aliasing&quot;&gt;Stream Aliasing&lt;/h3&gt;

&lt;p&gt;Stream Aliasing is the premier mechanism for securing your online content. You can specify &lt;em&gt;Aliases&lt;/em&gt; for each of your inbound streams. When Stream Aliasing has been enabled, inbound streams cannot be accessed directly. Instead, you must create aliases for each stream that clients then use to obtain the stream. It is important to note again that when aliasing is on, streams can &lt;strong&gt;no longer be requested/played by using the localStreamName.&lt;/strong&gt; In addition, stream aliases are &lt;strong&gt;single use&lt;/strong&gt; , meaning that once a stream has been requested using an alias, that alias is deleted and is no longer available. This allows you to tightly control access to your online content.&lt;/p&gt;

&lt;p&gt;Stream Aliasing allows the protection of streams on servers that are available to the public. You can generate stream aliases for use by your website or player/clients. Once the client uses that alias you can be assured that the stream is again secured until you issue a new alias to an authorized user. Stream Aliasing can be enabled by changing the value &lt;em&gt;hasStreamAliases&lt;/em&gt; in config.lua to &lt;em&gt;true&lt;/em&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;addStreamAlias
removeStreamAlias
listStreamAliases
flushStreamAliases
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Aliases can be managed using four API commands:&lt;/p&gt;

&lt;h4 id=&quot;alias-expired-period&quot;&gt;Alias Expired Period&lt;/h4&gt;

&lt;p&gt;While aliases are typically single-use, there is an additional parameter, ExpirePeriod, which allows for additional flexibility in the automatic removal of aliases by the system. ExpirePeriod is an integer value that can either be positive or negative.:&lt;/p&gt;

&lt;p&gt;Positive number: The alias is not a &lt;em&gt;single use&lt;/em&gt;, it will be valid for this many seconds. For example,&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;expirePeriod=10
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The alias will be valid for 10 seconds, and may be used repeatedly during that 10 seconds.&lt;/p&gt;

&lt;p&gt;Negative number: The alias is a &lt;em&gt;single use&lt;/em&gt; and will also expire after the absolute-value of the parameter seconds have passed. For example,&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;expirePeriod=-10
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;In this case the alias will expire after 10 seconds unless it has been used before then&lt;/p&gt;

&lt;p&gt;Value of 0: Zero is a special case in which the alias is made permanent. The alias will never automatically expire. This can be used to rename streams.&lt;/p&gt;

&lt;h4 id=&quot;common-alias-configuration&quot;&gt;Common Alias Configuration&lt;/h4&gt;

&lt;p&gt;Example: Pay-wall/Registered User Section&lt;/p&gt;

&lt;p&gt;Stream Aliasing allows you to maintain your own client authentication methods, whether that requires your users to login via your web site, through a mobile app, or some other means. Once a client has been authenticated via your existing method, you then simply need to issue the &lt;code class=&quot;highlighter-rouge&quot;&gt;addStreamAlias&lt;/code&gt; command to the EMS just before issuing the video link to the client.&lt;/p&gt;

&lt;p&gt;For example: a user has logged into her home security account and has just clicked on a link to view the âfront door cameraâ. Your web server will be called by that link and do the following:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Verify the userâs current session&lt;/li&gt;
  &lt;li&gt;Issue the following command to the EMS:&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;addStreamAlias localstreamname=privateDoorCam aliasName=publicDoorCam&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Serve the player page to the client with the following URI (using flash in this example): &lt;code class=&quot;highlighter-rouge&quot;&gt;rtmp://MyServer/live/publicDoorCam&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;When the userâs app or browser loads the player and plays the stream, the alias will be automatically deleted. This means that if anyone sniffed the link, or if the user copies the link somehow and tries to play it back directly at a later date, it will fail to play.&lt;/p&gt;

&lt;h3 id=&quot;group-name-aliasing&quot;&gt;Group Name Aliasing&lt;/h3&gt;

&lt;p&gt;Stream Aliasing only works for connection based protocols (RTMP and RTSP), so what about HLS, DASH and all the other HTTP based protocols? That is where Group Name Aliasing comes in.&lt;/p&gt;

&lt;p&gt;The EMS Web Server (EWS) API functions provide the means for adding/removing/checking/listing group name aliases. Same as stream aliases, group name aliases are designed to be used to protect or hide your source stream. Once a group name alias is created the group name can no longer be used to request HTTP playback of that stream. Once a group name alias is requested by a client the alias is then removed.&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;hasGroupNameAliases&lt;/em&gt; option in the web server configuration file, &lt;em&gt;webconfig.lua&lt;/em&gt;, should be set to true to enable group name aliases. HLS/HDS/MSS/DASH streams should be created before adding group name aliases.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;addGroupNameAlias
removeGroupNameAlias
getGroupNameByAlias
listGroupNameAliases
flushGroupNameAliases
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Group name aliases can be managed using five API commands:&lt;/p&gt;

&lt;p&gt;A typical use case for Group Name Aliases is shown below. The use case also applies to HDS, MSS, and DASH streams (simply replace createHLSstream with createHDSstream, createMSSstream, or createDASHstream, respectively, and use a compatible player.&lt;/p&gt;

&lt;p&gt;See the Interoperability section for a list of compatible players for different HTTP stream types).&lt;/p&gt;

&lt;p&gt;1. Setup an HTTP Stream&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Create an HLS stream:&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;createhlsstream localstreamnames=mystream targetfolder=/var/evo-webroot groupname=mygroup playlisttype=rolling cleanupdestination=1
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;List all active HTTP streaming sessions:&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;listHttpStreamingSessions
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Add a group name alias for the HTTP stream&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;addGroupNameAlias groupName=mygroup aliasName=myalias
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;2. Playback the HTTP stream&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Open a compatible player&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Open the URI of the aliased HTTP stream&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; http://localhost:8888/myalias
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Behind the scenes, this actually plays back &lt;a href=&quot;http://localhost:8888/mygroup/mystream/playlist.m3u8&quot;&gt;&lt;strong&gt;http://localhost:8888/mygroup/mystream/playlist.m3u8&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The EWS takes care of translating the group name alias to the correct path for the playlist.&lt;/p&gt;

&lt;h3 id=&quot;inbound-authentication&quot;&gt;Inbound Authentication&lt;/h3&gt;

&lt;p&gt;The EvoStream Media Server can require that streams be authenticated before they can be pushed into the server. This is done for protection and so that outside sources cannot overwhelm your server without your control. Pushing streams is only valid for TCP based protocols like RTMP and RTSP. By default, the authentication values used by the EMS are defined in the &lt;code class=&quot;highlighter-rouge&quot;&gt;config/users.lua&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;To enable or disable Inbound Authentication you may do either of the following:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Comment, or un-comment, out the âAuthenticationâ section in the &lt;code class=&quot;highlighter-rouge&quot;&gt;config/config.lua&lt;/code&gt; file.&lt;/li&gt;
  &lt;li&gt;Set the Boolean value in &lt;code class=&quot;highlighter-rouge&quot;&gt;config/auth.xml&lt;/code&gt; to true (enabled) or false (disabled).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;An important part of inbound authentication for RTMP is validating the âEncoder Agentâ. This is essentially a name that the stream source uses to identify itself. There are generally only a few Encoder Agents that are used since most encoders mimic the functionality of Adobeâs Flash Media Encoder. When pushing a stream into the EMS, there are two options when it comes to Encoder Agent strings:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Change your Encoder Agent string to one that the EMS anticipates:&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;FMLE/3.0 (compatible; FMSc/1.0)&lt;/li&gt;
  &lt;li&gt;Wirecast/FM 1.0 (compatible; FMSc/1.0)&lt;/li&gt;
  &lt;li&gt;EvoStream Media Server ( &lt;a href=&quot;http://www.evostream.com/&quot;&gt;www.evostream.com&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;Add your Encoder Agent string into the list of encoderAgents in the config.lua file.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;outbound-authentication&quot;&gt;Outbound Authentication&lt;/h3&gt;

&lt;p&gt;When pushing streams, the EMS makes it very easy to provide authentication for sources that require it. You simply need to specify the username and password in the URI for the push command.&lt;/p&gt;

&lt;p&gt;The official format for the URI is as follows:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rtmp://Username:Password@IPAddress:Port/stream/destination
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Using this, your pushstream command may look like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pushstream uri=rtmp://myname:mypass@192.168.1.5/live localstreamname=TestStream1 targetstreamname=PushedStream
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;client-authentication&quot;&gt;Client Authentication&lt;/h3&gt;

&lt;p&gt;Users may optionally enforce client authentication for RTSP clients. By enabling the âAuthenticatePlayâ parameter within the authentication -&amp;gt; rtsp node of the config.lua file. When enabled, all RTSP clients must provide a username/password combination specified in users.lua.&lt;/p&gt;

&lt;h3 id=&quot;encoderuser-agents&quot;&gt;Encoder/User Agents&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;emulateUserAgent=FMLE/3.0\ (compatible;\ FMSc/1.0)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;When pushing RTMP there is often the need to change the Encoder Agent used by the EMS. The Encoder Agent is essentially a string that identifies the software that is acting as the stream source. Some RTMP end-points require that streams come from well-known sources. To accomplish this simply add the &lt;em&gt;emulateUserAgent&lt;/em&gt; parameter to your &lt;em&gt;pushStream&lt;/em&gt; command. It is often best to use the FMLE encoder agent:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Spaces have been escaped so that the parameter is parsed correctly.&lt;/p&gt;

&lt;p&gt;For convenience, the EMS provides several shorthand User-Agent strings. These shorthand strings are not case-sensitive.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;emulateUserAgent&lt;/th&gt;
      &lt;th&gt;Resolves as&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;emulateUserAgent=evo&lt;/td&gt;
      &lt;td&gt;EvoStream Media Server ( &lt;a href=&quot;http://www.evostream.com/&quot;&gt;www.evostream.com&lt;/a&gt;)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;emulateUserAgent=FMLE&lt;/td&gt;
      &lt;td&gt;FMLE/3.0 (compatible; FMSc/1.0)â&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;emulateUserAgent=wirecast&lt;/td&gt;
      &lt;td&gt;Wirecast/FM 1.0 (compatible; FMSc/1.0)â&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;emulateUserAgent=flash&lt;/td&gt;
      &lt;td&gt;MAC 11,3,300,265&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The default emulateUserAgent is evo&lt;/p&gt;

</description>
        <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
        <link>http://docs.evostream.com/ems_user_guide/security</link>
        <guid isPermaLink="true">http://docs.evostream.com/ems_user_guide/security</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>Run-Time API</title>
        <description>&lt;p&gt;The EMS provides a bi-directional RESTful API for interacting with it both manually and progromaticallyprogrammatically. It allows you to write simple web services and scripts to extend and build your own logic on top of the EMS.&lt;/p&gt;

&lt;p&gt;The API is composed of two parts. The calls you can make into the EMS is our API. The second part is the Event Notification System which calls you back when stuff happens with the EMS.&lt;/p&gt;

&lt;p&gt;Using these two halves of the API you can perform complex load balancing, create custom stream work flows, encrypt and protect your stream traffic and more, all on the fly, and with simple and efficient web services or local scripts.&lt;/p&gt;

&lt;p&gt;EvoStream provides a set of sample web services that leverage the API. These web services can be found on our website and can be used directly or leveraged to start your own project. Download them here: &lt;a href=&quot;https://evostream.com/software-downloads/&quot;&gt;https://evostream.com/software-downloads/&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;accessing-the-run-time-api&quot;&gt;Accessing the Run-Time API&lt;/h2&gt;

&lt;h3 id=&quot;manual-command-line&quot;&gt;Manual Command Line&lt;/h3&gt;

&lt;p&gt;This ASCII-based interface is often the first interface used by users. It can be accessed easily through the telnet application (available on all operating systems) or through common scripting languages.&lt;/p&gt;

&lt;p&gt;To access the API via the telnet interface, a telnet application will need to be launched on the same computer that the EMS is running on. The command to open telnet from a command prompt should look something like the following:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;telnet localhost 1222
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Telnet may need to be enabled using WindowsÂ® operating systems. To do this, go to the &lt;em&gt;Control Panel -&amp;gt; Programs -&amp;gt; Turn Windows Features on and off&lt;/em&gt;. Turn the Telnet Client program on.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/ems_user_guide/assets/runtime1.png&quot; alt=&quot;RUNTIME-FIG1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Please also note that on WindowsÂ®, the default telnet behavior will need to be changed. The local echo and new line mode should be set for proper behavior. Once telnet is launched, exit the telnet session by typing &lt;code class=&quot;highlighter-rouge&quot;&gt;CTRL&lt;/code&gt;+&lt;code class=&quot;highlighter-rouge&quot;&gt;]&lt;/code&gt;. Then enter the following commands:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;set localecho
set crlf
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;To return to the WindowsÂ® telnet session, press &lt;code class=&quot;highlighter-rouge&quot;&gt;Enter&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;Return&lt;/code&gt; key.&lt;/p&gt;

&lt;p&gt;Once the telnet session is established, type out the desired commands which will be immediately executed on the server after the Enter/Return key is pressed.&lt;/p&gt;

&lt;p&gt;An example of a command request and response from a telnet session would be the following:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Request:&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;version
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Response:&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Command entered successfully!
Version

banner: EvoStream Media Server (www.evostream.com) version 1.7.0. build 4153 with hash: 4ab5d9145ae3b4b3dfeb3af5ce6890f015824974 on branch: develop - PacMan|m| - (built on 2015-11-06T08:24:32.000)
buildDate: 2015-11-03T01:50:37.000
buildNumber: 4153
codeName: PacMan|m|
releaseNumber: 1.7.0
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;ascii-json-cli&quot;&gt;ASCII JSON CLI&lt;/h3&gt;

&lt;p&gt;Accessing the API over the same Telnet interface, but by using the port &lt;strong&gt;1112&lt;/strong&gt; will yield the same results as Manual Command Line, but the results will all be returned formatted in JSON. This is very convenient for CGI and BASH scripting against the EMS API.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Please note that the first character returned by the JSON response is the LENGTH of the JSON payload, allowing you to allocate properly sized structures at runtime.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;An example of a command request/response from a telnet session would be the following:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;telnet localhost 1112
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Request:&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;version
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Response:&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;data&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;banner&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;EvoStream Media Server (www.evostream.com) version 1.7.0. build 4153 with hash: c50ee04ec98886ed1f54d599355e04346bf50df0 on branch: develop - PacMan|m|-(built on 2015-11-03T01:50:37.000)&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;branchName&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;develop&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;buildDate&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1446515437&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;buildNumber&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;4153&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;codeName&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;PacMan|m|&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;hash&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;c50ee04ec98886ed1f54d599355e04346bf50df0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;releaseNumber&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1.7.0.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;description&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Version&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;status&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;SUCCESS&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;http&quot;&gt;HTTP&lt;/h3&gt;

&lt;p&gt;To access the API via the HTTP interface, simply make an HTTP request on the server using any browser with the command to be executed. By default, the port used for these HTTP requests is &lt;strong&gt;7777&lt;/strong&gt;. The HTTP interface port can be changed in the main configuration file used by the EMS (config.lua).&lt;/p&gt;

&lt;p&gt;A general http format request would be the following:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http://[EMS IP]:7777/[API]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;An example of a command request and response from an HTTP session would be the following:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Request:&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http://localhost:7777/version
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Response:&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;data&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;banner&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;EvoStream Media Server (www.evostream.com) version 1.7.0. build 4153 with hash: 4ab5d9145ae3b4b3dfeb3af5ce6890f015824974 on branch: develop - PacMan|m| - (built on 2015-11-06T08:24:32.000)&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;branchName&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;develop&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;buildDate&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2015-11-06T08:24:32.000&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;buildNumber&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;4176&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;codeName&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;PacMan|m|&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;hash&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;4ab5d9145ae3b4b3dfeb3af5ce6890f015824974&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;releaseNumber&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1.7.0.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;description&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Version&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;status&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;SUCCESS&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;All of the API functions are available via HTTP, but the request must be formatted slightly different if parameters are included. To make an API call over HTTP, the parameters to be used should be in base64 format.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http://IP:7777/[API]?params=([base64 encoded parameters])
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Sampling a &lt;code class=&quot;highlighter-rouge&quot;&gt;pullstream&lt;/code&gt; command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(firstParam=XXX secondParam=YYYâ¦)
(uri=rtsp://localhost:5544/vod/mp4.bunny.mp4 localStreamName=bunny)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Type in the parameters first:&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Convert the parameters using a base64 encoder:&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;Converted parameter:&lt;/strong&gt;&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  dXJpPXJ0c3A6Ly9sb2NhbGhvc3Q6NTU0NC92b2QvbXA0LmJ1bm55Lm1wNCBsb2NhbHN0cmVhbW5hbWU9YnVubnkp
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The corresponding request in HTTP format would be:&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  http://localhost:7777/pullstream?params= dXJpPXJ0c3A6Ly9sb2NhbGhvc3Q6NTU0NC92b2QvbXA0LmJ1bm55Lm1wNCBsb2NhbHN0cmVhbW5hbWU9YnVubnkp
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Base64&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;A group of similar binary-to-text encoding schemes that represent binary data in an  &lt;a href=&quot;https://en.wikipedia.org/wiki/ASCII&quot;&gt;ASCII&lt;/a&gt; string format by translating it into a  &lt;a href=&quot;https://en.wikipedia.org/wiki/Radix&quot;&gt;radix&lt;/a&gt;-64 representation. There are available base64 encoders online to get the encoded result.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;PHP and JavaScript&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;PHP and JavaScript functions are also provided. These functions simply wrap the HTTP interface calls and can be found in the EMS Web UI directory.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Securing the API&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;By default, the ASCII API is protected, and access from any outside computer is prohibited. This can of course be modified within the config.lua file, but keeping this restriction is recommended for maintaining server security.&lt;/p&gt;

&lt;p&gt;The HTTP based API is also restricted by default to only local access. However, unlike the ASCII API interface, there are often good reasons to expose the HTTP API. To secure the HTTP based API in this case, you will enable Proxy Authentication on the EWS (details found in the EWS section of this doc). This will enforce that a valid username and password be provided for each and every API call made, ensuring on authorized access to the EMS API.&lt;/p&gt;

&lt;h2 id=&quot;configuring-and-receiving-event-notifications&quot;&gt;Configuring and Receiving Event Notifications&lt;/h2&gt;

&lt;p&gt;EMS generates notifications based upon events that occur at runtime. These events are formatted as HTTP calls and can be delivered to any address and port desired.&lt;/p&gt;

&lt;p&gt;Event Notifications are enabled by default and are configured to send to the local web services provided within your EMS installation. The Web Services are &lt;strong&gt;disabled&lt;/strong&gt; by default, and so do not take any action on the events. Please review the EvoStream Web Services documentation for instructions on enabling and working with each of the web services.&lt;/p&gt;

&lt;p&gt;Additional Event Notification destinations can be enabled (or disabled) by modifying the EMS config file: &lt;code class=&quot;highlighter-rouge&quot;&gt;config.lua&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To enable Event Notifications you will need to Enable/Uncomment the &lt;em&gt;eventLogger&lt;/em&gt; section of the config.lua file. Comments in LUA are specified by either a &lt;code class=&quot;highlighter-rouge&quot;&gt;--&lt;/code&gt; for a single line, or denoted by a &lt;code class=&quot;highlighter-rouge&quot;&gt;--[[&lt;/code&gt; to start a comment block and a &lt;code class=&quot;highlighter-rouge&quot;&gt;]]--&lt;/code&gt; to end a comment block. By default the eventLogger section is commented out using block style comments, so you will need to remove both the &lt;code class=&quot;highlighter-rouge&quot;&gt;--[[&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;]]--&lt;/code&gt; strings. See the Configuration Files section for more information.&lt;/p&gt;

&lt;h3 id=&quot;sinks&quot;&gt;Sinks&lt;/h3&gt;

&lt;p&gt;Sinks are defined as âa specific destination for eventsâ and can be of two types: âfileâ and âRPCâ. File sinks simply write events to a file, as defined by the âfilenameâ parameter. This works much like a system logger. Users can choose the format of the output between JSON, XML, W3C and text. JSON and XML will be formatted as JSON and XML respectively and each event will be written to a single line. This is done for ease of parsing. The W3C formatted file is compliant with the requirement of having space or tab-delimited columns. In addition, it has a header line that is commented out (#) that indicates the names of the columns. As with JSON and XML, each event is also written to a single line. The Text format writes to the event file in a way that is easy to read, where events are on multiple lines. The file sink is &lt;strong&gt;off&lt;/strong&gt; by default, but can be turned on by creating the sink in the &lt;code class=&quot;highlighter-rouge&quot;&gt;config.lua&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;To receive HTTP based Event Notifications, an RPC type sink must be defined (and is by default). The URL parameter defines the location that will be called with each event. The URL can be a specific web service script or just an IP and port on which service is listening to that can interpret these events. RPC sinks have the option of one of three serializer types, or in other words, the way the data will be formatted within the HTTP post: JSON, XML, XMLRPC. XMLRPC events are formatted as XML using a traditional XML-RPC schema. The XML serializer type uses an XML schema that is more condensed and specific to the EMS Event Notification System. The JSON serializer type has the same schema as XML, but is formatted as JSON.&lt;/p&gt;

&lt;p&gt;For any Sink, users can define an array of &lt;em&gt;enabledEvents&lt;/em&gt;. When this array is present, &lt;strong&gt;only&lt;/strong&gt; the events listed will be sent to that sink. If this array is not present, &lt;strong&gt;all&lt;/strong&gt; events will be sent to the sink. The full list of events can be found later in this document.&lt;/p&gt;

&lt;h2 id=&quot;api-definition&quot;&gt;API Definition&lt;/h2&gt;

&lt;p&gt;The EMS Run-Time API is fully defined in the document: &lt;strong&gt;API Definition.pdf&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This document can be found in the documents folder of the EMS package.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Please review this document and use it as a reference as you explore the EMS Run-Time API!&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;my-first-call-api&quot;&gt;My First Call API&lt;/h2&gt;

&lt;p&gt;We will start by retrieving an external stream that we can then use to playback. First we will pull in a test stream. The source URI is:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rtmp://s2pchzxmtymn2k.cloudfront.net/cfx/st/mp4:sintel.mp4
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We will start by retrieving an external stream that we can then use to playback. First we will pull in a test stream. The source URI is:&lt;/p&gt;

&lt;p&gt;For simplicity, we will be using the Command Line interface to send API commands to the server. We will use the telnet utility (available on all operating systems) to do this. Learn more about using telnet to connect to EMS in the âAccessing the Run-Time APIâ section above in this document.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Run the EMS. &lt;em&gt;(See Starting the Server)&lt;/em&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Open a telnet session to the EMS&lt;/p&gt;

    &lt;p&gt;To pull the stream, type the command below on the telnet console:&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  pullstream uri= rtmp://s2pchzxmtymn2k.cloudfront.net/cfx/st/mp4:sintel.mp4 localstreamname=TestStream1
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;

    &lt;p&gt;This will tell the EMS to go get the test stream and name it &lt;code class=&quot;highlighter-rouge&quot;&gt;TestStream1&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Now that the stream is a part of the EMS, we will want to play it. You can either use the EMS UI, or we can use an external player such as VLC. You can use any of the following URLâs to play it back using âNetwork Streamâ:&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  rtmp://localhost/live/TestStream1
  rtmp://localhost/live/TestStre
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;user-defined-variables&quot;&gt;User Defined Variables&lt;/h2&gt;

&lt;p&gt;While the EMS provides an extensive set of API functions, there may be times where the variables provided are not sufficient, or where you may need extra information to be associated with individual streams. To support these needs, the EMS API implements &lt;em&gt;User Defined Variables&lt;/em&gt;. User Defined Variables can be used with any API function where information is maintained by the EMS (i.e. pulling a stream, creating a timer, starting a transcode job, etc.).&lt;/p&gt;

&lt;p&gt;To specify a User Defined Variable, you simply need to append an underscore (&lt;code class=&quot;highlighter-rouge&quot;&gt;_&lt;/code&gt;) to the beginning of your variable name. The User Defined variables are reported back whenever you get information about the command: listStreams, listConfig, Event Notifications, etc.&lt;/p&gt;

&lt;p&gt;Some common use cases for User Defined Variables are as follows:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;setTimer value=120 _streamName=MyStreamsetTimer value=120 _streamID=5
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Setting a timer to stop a stream after a set period of time&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pullstream uri=rtmp://192.168.1.5/live/myStream localstreamname=test1 _myID=5 _myName=secretSquirrel
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;These commands will fire a timer event after 120 seconds with the set stream name or stream id respectively.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Attach a custom identifier to a local stream&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  pushstream uri=rtmp://192.168.1.5/live/myStream localstreamname=test1 _myID=5 _myName=secretSquirrel
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Set a custom value on a pushed stream&lt;/p&gt;

&lt;h2 id=&quot;ems-demohtml&quot;&gt;EMS Demo.html&lt;/h2&gt;

&lt;p&gt;Provided along with the EMS is a simple html page which helps users to formulate simple API commands. The page can be found at &lt;code class=&quot;highlighter-rouge&quot;&gt;../demo/emsdemo.html&lt;/code&gt; on the installed directory of EMS.&lt;/p&gt;

&lt;p&gt;Simply double click the html file to open it in a browser.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/ems_user_guide/assets/runtime2.png&quot; alt=&quot;RUNTIME-FIG2&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
        <link>http://docs.evostream.com/ems_user_guide/runtimeapi</link>
        <guid isPermaLink="true">http://docs.evostream.com/ems_user_guide/runtimeapi</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>Protocol Support and Specifics</title>
        <description>&lt;p&gt;This section will dive into the specific capabilities of the EvoStream Media Server. Please keep in mind that directionality is always from the perspective of the EMS. Therefore âinboundâ will refer to any stream coming into the EMS and âoutboundâ will refer to any stream leaving the EMS.&lt;/p&gt;

&lt;h2 id=&quot;real-time-messaging-protocol-rtmp&quot;&gt;Real Time Messaging Protocol (RTMP)&lt;/h2&gt;

&lt;p&gt;The EMS is fully compatible with the RTMP protocol.  This means that it can receive streams from Adobeâs Flash Media Live Encoder (FMLE), Wirecast, Flash Applets, and many other sources.  It also enables any Flash or Adobe-Air based clients to play streams from the EMS.  Some examples of clients/players that use RTMP are FlowPlayer, JWPlayer and VLC.  Using RTMP, you can reach ANY Flash enabled web browser, which really means that you can reach any browser on Windows, Mac OSX and Linux.&lt;/p&gt;

&lt;h3 id=&quot;ingesting-rtmp&quot;&gt;Ingesting RTMP&lt;/h3&gt;

&lt;p&gt;There are several ways that the EMS can use RTMP as a stream source. The first method is to use theRuntime-API to pull a stream from some source. An example of a pullstream command is as follows:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pullstream uri=rtmp://192.168.1.5/live/MyTestStream localstreamname=TestStream
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This command tells the EMS to go and get â&lt;code class=&quot;highlighter-rouge&quot;&gt;MyTestStream&lt;/code&gt;â from the server at &lt;code class=&quot;highlighter-rouge&quot;&gt;192.168.1.5&lt;/code&gt;, and then name the stream locally â&lt;code class=&quot;highlighter-rouge&quot;&gt;TestStream&lt;/code&gt;â.  Please see EMS Basics for more information on local stream names.&lt;/p&gt;

&lt;p&gt;The typical URI format for requesting RTMP streams is as follows:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rtmp://[username[:password]@]IP[:port]/&amp;lt;app name&amp;gt;/&amp;lt;stream name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;The EMS also allows you to PUSH an RTMP stream into it.&lt;/strong&gt;  Software like Wirecast and FMLE prefer this type of paradigm.  The EMS listens for RTMP streams on port 1935, which is the default RTMP port. You will need to consult the manuals for your stream source to understand how to push a stream.  The EMS can require authentication for streams that are being pushed to it.  If authentication is enabled, you will need to either supply authentication details along with your pushed stream, or disable authentication for the EMS before the EMS will accept your streams.  Please see the Security and Authentication for more information.&lt;/p&gt;

&lt;p&gt;The EMS provides additional RTMP ingest security through RMTP Ingest Points.  Please see RTMP Ingest Points below for more information.&lt;/p&gt;

&lt;p&gt;The EMS accepts RTMP streams pushed both as PUBLISH and RECORD.  PUBLISH streams become local live streams. RECORD streams also become local live streams but are also recorded to file. The recordedStreamsStorage parameter in the config/config.lua file specifies a default location to place files when an RTMP RECORD stream is pushed to the EMS.&lt;/p&gt;

&lt;h3 id=&quot;outbound-rtmp-live-and-vod&quot;&gt;Outbound RTMP (Live and VOD)&lt;/h3&gt;

&lt;p&gt;Any source stream can be played back via RTMP.  Most often a user will be using a Flash based player which will make an RTMP request on the EMS.  To request an RTMP stream from the EMS, you need to use a URI formatted as follows:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rtmp://[username[:password]@]IP[:port]/&amp;lt;live/vod&amp;gt;/&amp;lt;LocalStreamName&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;An example of this URI may be:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rtmp://192.168.1.5/live/MyTestStream
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The EMS can also PUSH streams towards another server or some other destination.  The &lt;code class=&quot;highlighter-rouge&quot;&gt;pushStream&lt;/code&gt; Runtime-API function is used to do this. An example of the &lt;code class=&quot;highlighter-rouge&quot;&gt;pushStream&lt;/code&gt; API is as follows:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pushStream uri=rtmp://192.168.1.5/live/ localStreamName=MyTestStream targetStreamName=PushedStreamName
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;rtmpt&quot;&gt;RTMPT&lt;/h3&gt;

&lt;p&gt;RTMP via HTTP is supported by the EMS.  RTMPT can be leveraged in exactly the same way as RTMP. You will simply need to use âRTMPTâ instead of âRTMPâ in the various URIs and addresses. To enable the EMS to accept requests from RTMPT clients, you must create an Acceptor (listener) in the config/config.lua file that looks like the following:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;ip=&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;0.0.0.0&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;                                  
      &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;port=8081,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;                                     
      &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;protocol=&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;inboundRtmpt&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;rtmps&quot;&gt;RTMPS&lt;/h3&gt;

&lt;p&gt;RTMP secured by SSL is supported by the EMS.  RTMPS can also be leveraged in exactly the same way as RTMP. In addition to using âRTMPSâ instead of âRTMPâ in the various URIs and addresses, you will also need to create and specify a certificate and key to be able to âServeâ RTMPS streams.&lt;/p&gt;

&lt;p&gt;You must create a signed certificate file using a library like OpenSSL (&lt;em&gt;.crt) and a corresponding public key file (&lt;/em&gt;.pem).  You must then create an Acceptor (listener) in the config/config.lua file that looks like the following:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;ip=&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;0.0.0.0&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;                                  
      &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;port=8082,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;                                     
      &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;protocol=&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;inboundRtmps&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;                       
      &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;sslKey=&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;server.key&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;                           
      &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;sslCert=&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;server.crt&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;                           
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The paths to the sslKey and sslCert are relative to the runtime directory. It may be best to use absolute paths when specifying those files.&lt;/p&gt;

&lt;p&gt;Again, this setup is only necessary when serving these files (clients requesting a stream via RTMPS).  These keys are not used when pushing or pulling a stream since the other side of the transaction will be acting as the server and will therefore provide its own keys&lt;/p&gt;

&lt;h3 id=&quot;rtmp-ingest-points&quot;&gt;RTMP Ingest Points&lt;/h3&gt;

&lt;p&gt;When Ingest Points are active, the EMS requires streams pushed to the EMS to provide a specific Target Stream Name.  This mechanism provides a robust way to allow trusted partners to easily push streams to your EMS server.&lt;/p&gt;

&lt;p&gt;Ingest Points operate by specifying two linked values: the &lt;code class=&quot;highlighter-rouge&quot;&gt;privateStreamName&lt;/code&gt; and the &lt;code class=&quot;highlighter-rouge&quot;&gt;publicStreamName&lt;/code&gt;.  Both the privateStreamName and the &lt;code class=&quot;highlighter-rouge&quot;&gt;publicStreamName&lt;/code&gt; must be unique within a given EMS instance.  When an RTMP stream is PUSHED to the EMS, the Target Stream Name defined within the RTMP stream must match one of the defined privateStreamNames.  If a match exists, the stream is accepted and brought into the EMS.  This new stream can then be accessed from the EMS using the associated &lt;code class=&quot;highlighter-rouge&quot;&gt;publicStreamName&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To enable Ingest Points, you must set the &lt;code class=&quot;highlighter-rouge&quot;&gt;hasIngestPoints&lt;/code&gt; parameter in the config/config.lua file to true:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;hasingestpoints=true,
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Ingest Points have a full set of API functions which must beused to add and remove Ingest Points. The API functions are listed here, but please see the API Definition doc for a full description.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;createIngestPoint&lt;/li&gt;
  &lt;li&gt;removeIngestPoint&lt;/li&gt;
  &lt;li&gt;listIngestPoints&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ingest Points are stored by the EMS into the &lt;strong&gt;config/ingestPoints.xml&lt;/strong&gt; file.&lt;/p&gt;

&lt;h2 id=&quot;real-time-streaming-protocol-rtsp&quot;&gt;Real Time Streaming Protocol (RTSP)&lt;/h2&gt;

&lt;p&gt;Using the RTSP protocol can many different players and servers, including the native Android media player.   RTSP can be used as both a stream source and as an outbound stream protocol.  There are a few variants of RTSP and so it is important to understand a little bit about the protocol itself.&lt;/p&gt;

&lt;p&gt;RTSP itself is just a negotiation protocol.  Its job is to set up and coordinate other connections which will then handle the transfer of video and audio data.  Normally, the RTSP transaction will create 4 additional channels, one for audio, one for video, and then two Real Time Control Protocol (RTCP) connections for syncing the audio and video streams.  This means that a typical RTSP stream has actually 5 separate connections/streams.&lt;/p&gt;

&lt;p&gt;In addition to this setup, the audio and video streams can be transferred over a couple of different mechanisms, namely Real-time Transfer Protocol (RTP) or MPEG Transport Stream (MPEG-TS). The EMS supports all combinations of RTSP over RTP or MPEG-TS and with or without RTCP channels.&lt;/p&gt;

&lt;p&gt;While RTCP channels are usually included in RTSP streams, they are not required components.  The EMS does not, therefore, require them to be present.  However, the EMS will wait for a specified amount of time when a new RTSP stream is introduced while it tries to detect an RTCP channel. During this waiting period, all packets from the RTSP stream will be dropped!  This waiting period can be adjusted in the config.lua file by modifying the rtcpDetectionInterval parameter which sets the seconds to wait before starting the stream without RTCP support.&lt;/p&gt;

&lt;h3 id=&quot;ingesting-rtsp&quot;&gt;Ingesting RTSP&lt;/h3&gt;

&lt;p&gt;There are several ways that the EMS can use RTSP as a stream source.Â  The first method is to use the Runtime-API to pull a stream from some source.Â An example of a &lt;code class=&quot;highlighter-rouge&quot;&gt;pullstream&lt;/code&gt; command is as follows:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pullstream uri=rtsp://192.168.1.5/MyTestStream localstreamname=TestStream
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This command tells the EMS to go and get â&lt;code class=&quot;highlighter-rouge&quot;&gt;MyTestStreamâ&lt;/code&gt; from the server at &lt;code class=&quot;highlighter-rouge&quot;&gt;192.168.1.5&lt;/code&gt;, and then name the stream locally â&lt;code class=&quot;highlighter-rouge&quot;&gt;TestStreamâ&lt;/code&gt;.  Please see EMS Basics for more information on local stream names.&lt;/p&gt;

&lt;p&gt;The typical URI format for requesting RTSP streams is as follows:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rtsp://[username[:password]@]IP[:port]/&amp;lt;stream or sdp file name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;When pulling an RTSP stream via an HTTP Proxy, the pullstream command will be as follows:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pullstream uri=rtsp://[username[:password]@]HostName/StreamName httpProxy=IP[:PORT] localstreamname=TestStream
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;To pull an RTSP stream via HTTP the httpProxy parameter can again be leveraged:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pullstream uri=rtsp://[username[:password]@]HostName/StreamName httpProxy=self localstreamname=TestStream
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;httpProxy=self&lt;/code&gt; parameter simply implies that there is NO proxy, and to pull the stream, via HTTP, directly from the specified URI.&lt;/p&gt;

&lt;p&gt;The EMS also allows you to Push an RTSP stream into it. The EMS listens for RTSP streams on port 5544, which is NOT the default RTSP port of 554. This requires you to specify the port of 5544 when pushing streams into the EMS.  The port the EMS listens on can be modified by changing the appropriate value in the config.lua file.  You will need to consult the manuals for your stream source to understand how to push a stream.&lt;/p&gt;

&lt;p&gt;The EMS can require authentication for streams that are being pushed to it.  If authentication is enabled, you will need to either supply authentication details along with your pushed stream, or disable authentication for the EMS before the EMS will accept your streams.  Please see the Security and Authentication for more information.&lt;/p&gt;

&lt;p&gt;Please see the API Definition document for more information on API commands.&lt;/p&gt;

&lt;h3 id=&quot;outbound-rtsp-live-and-vod&quot;&gt;Outbound RTSP (Live and VOD)&lt;/h3&gt;

&lt;p&gt;Any source stream can be played back via RTSP.  Some common RTSP players are VLC, Android Devices and Quicktime.  To request an RTSP stream from the EMS, you need to use a URI formatted as follows:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rtsp://[username[:password]@]IP[:port]/[ts|vod|vodts]/&amp;lt;LocalStreamName or MP4 file name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Some examples of RTSP requests are as follows:&lt;/p&gt;

&lt;p&gt;Request a live RTSP/RTP stream:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rtsp://192.168.1.5:5544/MyTestStream
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Request a live RTSP/MPEG-TS stream:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rtsp://192.168.1.5:5544/ts/MyTestStream
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Request a VOD MP4 file via RTSP/RTP:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rtsp://192.168.1.5:5544/vod/MyMP4File.mp4
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Request a VOD MP4 file via RTSP/MPEG-TS:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rtsp://192.168.1.5:5544/vodts/MyMP4File.mp4
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;For VOD requests, the file name can also include the path relative to the media folder:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rtsp://192.168.1.5:5544/vod/folder1/folder2/MyMP4File.mp4
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Only MP4 files can be used for RTSP VOD playback.  TS and FLV files cannot be used as sources at this time.&lt;/p&gt;

&lt;p&gt;The EMS can also PUSH streams towards another server or some other destination.  The &lt;code class=&quot;highlighter-rouge&quot;&gt;pushStream&lt;/code&gt; Runtime-API function is used to do this. An example of the pushStream API is as follows:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pushStream uri=rtsp://192.168.1.5:554/live/ localStreamName=MyTestStream targetStreamName=PushedStreamName
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Please see the API Definition document for more information on API commands.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;mpeg-transport-stream-mpeg-ts&quot;&gt;MPEG Transport Stream (MPEG-TS)&lt;/h2&gt;

&lt;p&gt;The EMS fully supports MPEG2 Transport Stream over both UDP and TCP.  UDP MPEG-TS streams can be unicast, broadcast or multicast.  In order to receive a UDP multicast stream, you must issue a pullstream command using the &lt;strong&gt;dmpegtsudp://&lt;/strong&gt; protocol indicator (the âdâ is for deep-parse):&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pullstream uri=dmpegtsudp://229.0.0.1:5555 localstreamname=TestTSMulticast
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;TCP MPEG-TS streams can also be pulled by the server by using the above command, simply replacing â&lt;strong&gt;udpâ&lt;/strong&gt; with â&lt;strong&gt;tcpâ&lt;/strong&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pullstream uri=dmpegtstcp://192.168.1.5:5555 localstreamname=TestTSMulticast
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;MPEG-TS TCP streams can also be pushed into the server, but you must first tell the EMS what ports to listen to.  You can do this by creating âacceptorsâ in the &lt;strong&gt;config/config.lua&lt;/strong&gt; file:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;ip=&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;0.0.0.0&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;port=9998,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;protocol=&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;inboundTcpTs&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;ip=&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;0.0.0.0&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;port=9999,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;protocol=&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;inboundUdpTs&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;For either of these configured acceptors, a âlocalstreamnameâ variable can be added to set the name of the stream that gets pushed into the acceptor.  This will limit the acceptor to just a single inbound stream (the TCP acceptor could accept many if needed) but it has the advantage of creating a known stream name.&lt;/p&gt;

&lt;p&gt;For example, the following config will create a stream named âtest1â when an MPEG-TS stream is pushed over TCP to port 9998:
&lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;ip=&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;0.0.0.0&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;port=9998,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;localstreamname=&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;test1&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;protocol=&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;inboundTcpTs&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The EMS will need to be restarted before any changes to the config.lua file will take effect.&lt;/p&gt;

&lt;h2 id=&quot;html5-web-sockets&quot;&gt;HTML5 Web Sockets&lt;/h2&gt;

&lt;p&gt;HTML5 Web Socket technology provides socket connections between a web browser and a server, as opposed to the traditional request/response model of HTTP. With HTTP, for the server to send data the client has to initiate the communication via a request and the server will then send back a response. HTTP incurs considerable overhead which makes it not ideal for low latency applications.&lt;/p&gt;

&lt;p&gt;With Web Sockets, a persistent connection between the client (web browser) and the server is established and either of them can start sending data anytime, thus eliminating the dependency on the client-side to initiate the request. This results in a low-latency connection providing a more âreal-timeâ data delivery.&lt;/p&gt;

&lt;p&gt;The EMS utilizes this technology to provide the following functions:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Metadata Outbound Push â transmits Metadata to a browser as it is received.&lt;/li&gt;
  &lt;li&gt;Metadata Ingest â accepts incoming Metadata.&lt;/li&gt;
  &lt;li&gt;FMP4 Player â an acceptor which transmits a fragmented MP4 (FMP4) stream.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Both Metadata Outbound Push and Metadata Ingest use a &lt;strong&gt;Web Sockets Metadata Acceptor&lt;/strong&gt;. The EMS uses this to receive and/or send metadata.&lt;/p&gt;

&lt;p&gt;The definition for this is found in the acceptors section of the EMS configuration file (&lt;em&gt;config.lua&lt;/em&gt;):&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;acceptors =
{
    -- content removed for clarity
    -- WebSockets JSON Metadata
    {
        ip=&quot;0.0.0.0&quot;,
        port=8210,
        protocol=&quot;wsJsonMeta&quot;,
        -- streamname=&quot;~0~0~0~&quot;
    },
    -- content removed for clarity
},
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;streamname&lt;/code&gt; parameter is optional, default will match &lt;strong&gt;all&lt;/strong&gt; incoming streams.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ws://host:port/streamname
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Use the GET format to open a websocket channel:&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;streamname&lt;/code&gt; above, if not empty, will override what is specified in the acceptor definition in config.lua.&lt;/p&gt;

&lt;p&gt;Matching JSON metadata arrives as text. Use WS.send() to input JSON metadata.&lt;/p&gt;

&lt;p&gt;Below is a sample minimal metadata page:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;script&amp;gt;
    var ws= new WebSocket(&quot;ws://myems:8210/&quot;);
    ws.onmessage= function (msg) {
        console.log(msg.data);
    }
    Function doSend() {
        var x={fred:{wife:&quot;Wilma&quot;,friend:&quot;Barney&quot;}};
        ws.send(JSON.stringify(x));
    }
&amp;lt;/script&amp;gt;
&amp;lt;button onclick=&quot;doSend();&quot;&amp;gt;SEND&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;For the FMP4 Player, a Web Sockets acceptor is defined in &lt;code class=&quot;highlighter-rouge&quot;&gt;config.lua&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;acceptors =
{
    -- content removed for clarity
    -- WebSockets FMP4 Fetch
    {
        ip=&quot;0.0.0.0&quot;,
        port=8410,
        protocol=&quot;inboundWSFMP4&quot;,
    },
    -- content removed for clarity
},
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The above defines an outbound FMP4 acceptor. It does say âinboundâ because the Web Socket connector is inbound, it being an acceptor.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ws://host:port/streamname
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;To connect, a Web Socket âGETâ call is used. Following is the âGETâ URI format&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;streamname&lt;/em&gt; is a local stream name of a stream that is pulled in the EMS.&lt;/p&gt;

&lt;p&gt;A sample HTML file with an FMP4 player, &lt;code class=&quot;highlighter-rouge&quot;&gt;evowsvideo.html&lt;/code&gt;,  is provided. You may use this to try out the Web Socket FMP4 functionality.&lt;/p&gt;

&lt;p&gt;For convenience, a demo page is already available upon installation: &lt;code class=&quot;highlighter-rouge&quot;&gt;..\evo-webroot\demo\evowsvideo.html&lt;/code&gt;
Another option for playback is using &lt;code class=&quot;highlighter-rouge&quot;&gt;http://ers.evostream.com:5050/demo/evowsvideo.html&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Please see EMS How To Guide for more details.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;html5-playback-browser-compatibility&quot;&gt;HTML5 Playback Browser Compatibility&lt;/h3&gt;

&lt;p&gt;The following diagram shows the compatibility of various browsers with the EvoStream Websockets feature. This diagram is accurate as of November 2015. An updated version of this diagram is available here: &lt;a href=&quot;https://evostream.com/features/peer-to-peer&quot;&gt;https://evostream.com/features/peer-to-peer&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/ems_user_guide/assets/proto3.png&quot; alt=&quot;PROTO-FIG3&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;firefox-configuration-changes&quot;&gt;Firefox Configuration Changes&lt;/h3&gt;

&lt;p&gt;The following configuration changes must be made to Firefox before it will work with HTML5 playback and Peer to Peer:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;In the Firefox address field enter: about:config
    &lt;ul&gt;
      &lt;li&gt;Click âIâll be careful I promise!â&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Locate the following variables and set them (double-click) as necessary to match:
    &lt;ul&gt;
      &lt;li&gt;media.mediasource.enabled = true&lt;/li&gt;
      &lt;li&gt;media.mediasource.whitelist = false&lt;/li&gt;
      &lt;li&gt;media.mediasource.mp4.enabled = true&lt;/li&gt;
      &lt;li&gt;media.fragmented-mp4.exposed = true&lt;/li&gt;
      &lt;li&gt;media.fragmented-mp4.ffmpeg.enabled = true&lt;/li&gt;
      &lt;li&gt;media.fragmented-mp4.gmp.enabled = true&lt;/li&gt;
      &lt;li&gt;media.fragmented-mp4.use-blank-decoder = false&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Restart Firefox to activate these changes&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;http-live-streaming-hls&quot;&gt;HTTP Live Streaming (HLS)&lt;/h2&gt;

&lt;p&gt;The EvoStream Media Server fully supports HLS, which allows you to send streams to iOS devices such as iPhones and iPads. HLS is a file-based protocol. It functions by taking live streams and creating small âvideo file chunksâ that can be downloaded by iOS devices. Because HLS works this way it introduces significant latency (with default settings around 60 seconds). There is unfortunately no way around this.&lt;/p&gt;

&lt;p&gt;To generate an HLS stream, you must use the createHLSStream API command. This command has many parameters that allow you to tweak how the HLS file chunks are generated. Please see the EMS API Definition document for a thorough breakdown of all the command parameters.&lt;/p&gt;

&lt;p&gt;The HLS files, once generated by the EMS, must be served via a standard HTTP server. If you are using the EvoStream Amazon AMI, or have used one of the EvoStream Media Server installers you already have the EvoStream Web Server (EWS) installed and running. The &lt;code class=&quot;highlighter-rouge&quot;&gt;targetFolder&lt;/code&gt; parameter should reflect the web-root of your web server. When using EWS, the parameter should be as follows:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;targetFolder=../evo-webroot
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;An example &lt;code class=&quot;highlighter-rouge&quot;&gt;createHLSStream&lt;/code&gt; command is as follows:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;createHLSStream localstreamnames=MyStream targetFolder=../evo-webroot groupName=hls playlisttype=rolling
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;To access this stream from an iOS device, you would use the following URL:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http://IPofEMS:8888/hls/playlist.m3u8
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;dvr-playback&quot;&gt;DVR Playback&lt;/h3&gt;

&lt;p&gt;The EMS can support DVR functionality, allowing users to pause and resume playback of live streams.  This capability is already built into the HLS protocol support. Simply use an â&lt;code class=&quot;highlighter-rouge&quot;&gt;appending&lt;/code&gt;â playlist type or a â&lt;code class=&quot;highlighter-rouge&quot;&gt;rolling&lt;/code&gt;â playlist with a sufficiently large &lt;code class=&quot;highlighter-rouge&quot;&gt;playlistLength&lt;/code&gt; value.&lt;/p&gt;

&lt;p&gt;Users may also create time-shifted content or scheduled content by doing âlocal pullsâ of server side playlists.&lt;/p&gt;

&lt;h3 id=&quot;hls-resume&quot;&gt;HLS Resume&lt;/h3&gt;

&lt;p&gt;In cases of server or stream restarts, the HLS will resume in appending segments to previously created playlists. This can be enabled by using the &lt;code class=&quot;highlighter-rouge&quot;&gt;hlsResume&lt;/code&gt; parameter when invoking the &lt;code class=&quot;highlighter-rouge&quot;&gt;createHLSStream&lt;/code&gt; API.&lt;/p&gt;

&lt;p&gt;This parameter defaults to 0 (false).&lt;/p&gt;

&lt;p&gt;Below is an example usage of the &lt;code class=&quot;highlighter-rouge&quot;&gt;createHLSStream&lt;/code&gt; API command with the &lt;code class=&quot;highlighter-rouge&quot;&gt;hlsResume&lt;/code&gt; parameter:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;createHLSStream localstreamnames=MyStream targetFolder=/var/evo-webroot groupName=hls playlisttype=rolling hlsResume=1
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;audio-only-hls&quot;&gt;Audio Only HLS&lt;/h3&gt;

&lt;p&gt;The EMS supports audio-only HLS delivery.&lt;/p&gt;

&lt;p&gt;The createHLSStream API has an &lt;code class=&quot;highlighter-rouge&quot;&gt;audioOnly&lt;/code&gt; parameter that specifies if the resulting stream will have no video. This parameter defaults to 0 (false) if not specified.&lt;/p&gt;

&lt;p&gt;An example &lt;code class=&quot;highlighter-rouge&quot;&gt;createHLSStream&lt;/code&gt; command with the &lt;code class=&quot;highlighter-rouge&quot;&gt;audioOnly&lt;/code&gt; parameter follows:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;createHLSStream localstreamnames=MyStream targetFolder=/var/evo-webroot groupName=hls playlisttype=rolling audioOnly=1
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;verimatrix-drm&quot;&gt;VeriMatrix DRM&lt;/h3&gt;

&lt;p&gt;The EMS supports Verimatrix DRM for HLS streams. To enable Verimatrix support for your HLS streams you must enable and modify the âdrmâ section of the config.lua file. Please see the Configuration File section below for details on the âdrmâ section.&lt;/p&gt;

&lt;p&gt;Once Verimatrix support is enabled in the config file, you can then conditionally add Verimatrix protection to your HLS streams. Simply add the following parameter:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;createHLSStream localstreamnames=MyStream targetFolder=/var/evo-webroot groupName=hls playlisttype=rolling drmType=verimatrix	
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;aes-encryption&quot;&gt;AES Encryption&lt;/h3&gt;

&lt;p&gt;The EMS supports AES encryption for HLS streams. To use AES encryption you must specify two values in the createHLSStream API command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;createHLSStream localstreamnames=MyStream targetFolder=/var/evo-webroot groupName=hls playlisttype=rolling drmType=ems aesKeyCount=5
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Simply add the following parameter:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;drmType&lt;/strong&gt; is a string value that specifies the type of encryption to use (âemsâ means the EvoStream AES encryption scheme).&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;AESKeyCount&lt;/strong&gt; is an integer value (defaulted to 5), which specifies how many AES keys will be generated, and rotated through, while encrypting the HLS Stream.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;automatic-hls&quot;&gt;Automatic HLS&lt;/h3&gt;

&lt;p&gt;The EMS can be configured to automatically create an HLS stream for every new inbound stream. The details for the HLS creation are placed in the config.lua file instead of as parameters to the createHLSStream API call.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;autoHLS=
{
    targetFolder= &quot;..\\evo-webroot&quot;,
},
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;To enable automatic HLS a section in the &lt;code class=&quot;highlighter-rouge&quot;&gt;config.lua&lt;/code&gt; file needs to be enabled and modified.&lt;/p&gt;

&lt;h2 id=&quot;http-dynamic-streaming-hds&quot;&gt;HTTP Dynamic Streaming (HDS)&lt;/h2&gt;

&lt;p&gt;The EvoStream Media Server fully supports HDS, which allows you to play streams with Adobeâs OSMF based players. Just like HLS, HDS is a file-based protocol. It functions by taking live streams and creating small âvideo file chunksâ that are downloaded by OSMF players. Because HDS works in this way it introduces significant latency (with default settings around 60 seconds). There is unfortunately no way around this.&lt;/p&gt;

&lt;p&gt;To generate an HDS stream, you must use the &lt;code class=&quot;highlighter-rouge&quot;&gt;createHDSStream&lt;/code&gt; API command. This command has many parameters that allow you to tweak how the HDS file chunks are generated. Please see the EMS API Definition document for a thorough breakdown of all the command parameters.&lt;/p&gt;

&lt;p&gt;The HDS files, once generated by the EMS, must be served via a standard HTTP server. If you are using the EvoStream Amazon AMI, or have used one of the EvoStream Media Server installers you already have the EvoStream Web Server (EWS) installed and running. The &lt;code class=&quot;highlighter-rouge&quot;&gt;targetFolder&lt;/code&gt; parameter should reflect the web-root of your web server. When using EWS, the parameter should be as follows:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;createHDSStream localstreamnames=MyStream targetFolder=../evo-webroot groupName=hds playlisttype=rolling targetFolder=../evo-webroot
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;An example &lt;code class=&quot;highlighter-rouge&quot;&gt;createHDSStream&lt;/code&gt; command is as follows:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http://IPofEMS:8888/hds/manifest.f4m
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;To access this stream from a flash or html based player, you would use the following URL:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http://IPofEMS:8888/hds/manifest.f4m
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;When HDS generated files are being served through a web server (e.g. Nginx, Apache, etc.) there are times that the HDS bootstrap file is being requested several times by the HDS player but no corresponding fragment file has actually been served. This results to the video to be stalled between a few seconds to a minute before settling to a normal operation. The workaround is to adjust the configuration file of the web server (Nginx, Apache, etc.) and disable the âsendfileâ option by setting it to &lt;strong&gt;off&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&quot;automatic-hds&quot;&gt;Automatic HDS&lt;/h3&gt;

&lt;p&gt;The EMS can be configured to automatically create an HDS stream for every new inbound stream. The details for the HDS creation are placed in the config.lua file instead of as parameters to the &lt;code class=&quot;highlighter-rouge&quot;&gt;createHDSStream&lt;/code&gt; API call.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;autoHDS=
{
    targetFolder= &quot;..\\evo-webroot&quot;,
},
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;dynamic-adaptive-streaming-over-http-dash&quot;&gt;Dynamic Adaptive Streaming over HTTP (DASH)&lt;/h2&gt;

&lt;p&gt;The EvoStream Media Server fully supports DASH, which allows you to play streams with DASH players. Just like HLS, DASH is a file-based protocol. It functions by taking live streams and creating small âvideo file chunksâ that are downloaded by DASH players.&lt;/p&gt;

&lt;p&gt;To generate a DASH stream, you must use the &lt;code class=&quot;highlighter-rouge&quot;&gt;createDASHStream&lt;/code&gt; API command. This command has many parameters that allow you to tweak how the DASH file chunks are generated. Please see the EMS API Definition document for a thorough breakdown of all the command parameters.&lt;/p&gt;

&lt;p&gt;The DASH files, once generated by the EMS, must be served via a standard HTTP server. If you are using the EvoStream Amazon AMI, or have used one of the EvoStream Media Server installers you already have the Evostream Web Server (EWS) installed and running. The &lt;code class=&quot;highlighter-rouge&quot;&gt;targetFolder&lt;/code&gt; parameter should reflect the web-root of your web server. When using EWS, the parameter should be as follows:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;targetFolder=../evo-webroot
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;An example createDASHStream command is as follows:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;createDASHStream localstreamnames=MyStream targetFolder=../evo-webroot groupName=dash playlisttype=rolling
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;To access this stream from an HTML5 based player, you would use the following URL:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http://IPofEMS:8888/dash/manifest.mpd
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;automatic-dash&quot;&gt;Automatic DASH&lt;/h3&gt;

&lt;p&gt;The EMS can be configured to automatically create a DASH stream for every new inbound stream. The details for the DASH creation are placed in the &lt;code class=&quot;highlighter-rouge&quot;&gt;config.lua&lt;/code&gt; file instead of as parameters to the &lt;code class=&quot;highlighter-rouge&quot;&gt;createDASHStream&lt;/code&gt; API call.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;autoDASH=
{
    targetFolder= &quot;..\\evo-webroot&quot;,
},
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;To enable Automatic DASH a section in the &lt;code class=&quot;highlighter-rouge&quot;&gt;config.lua&lt;/code&gt; file needs to be enabled and modified.&lt;/p&gt;

&lt;h2 id=&quot;microsoft-smooth-streaming-mss&quot;&gt;Microsoft Smooth Streaming (MSS)&lt;/h2&gt;

&lt;p&gt;The EvoStream Media Server fully supports MSS, which allows you to play streams with Microsoft Silverlight-based players. Just like HLS, MSS is a file-based protocol. It functions by taking live streams and creating small âvideo file chunksâ that are downloaded by Silverlight players.&lt;/p&gt;

&lt;p&gt;To generate an MSS stream, you must use the &lt;code class=&quot;highlighter-rouge&quot;&gt;createMSSStream&lt;/code&gt; API command. This command has many parameters that allow you to tweak how the MSS file chunks are generated. Please see the EMS API Definition document for a thorough breakdown of all the command parameters.&lt;/p&gt;

&lt;p&gt;The MSS files, once generated by the EMS, must be served via a standard HTTP server. If you are using the EvoStream Amazon AMI, or have used one of the EvoStream Media Server installers you already have the Evostream Web Server (EWS) installed and running. The targetFolder parameter should reflect the web-root of your web server. When using EWS, the parameter should be as follows:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;targetFolder=../evo-webroot
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;An example createMSSStream command is as follows:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;createMSSStream localstreamnames=MyStream targetFolder=../evo-webroot groupName=mss playlisttype=rolling
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;To access this stream from a Silverlight player, you would use the following URL:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http://IPofEMS:8888/mss/manifest.ismc
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;automatic-mss&quot;&gt;Automatic MSS&lt;/h3&gt;

&lt;p&gt;The EMS can be configured to automatically create an MSS stream for every new inbound stream. The details for the MSS creation are placed in the config.lua file instead of as parameters to the &lt;code class=&quot;highlighter-rouge&quot;&gt;createMSSStream&lt;/code&gt; API call.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;autoMSS=
{
    targetFolder= &quot;..\\evo-webroot&quot;,
},
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;To enable Automatic MSS a section in the &lt;code class=&quot;highlighter-rouge&quot;&gt;config.lua&lt;/code&gt; file needs to be enabled and modified.&lt;/p&gt;

&lt;h3 id=&quot;working-with-mss&quot;&gt;Working with MSS&lt;/h3&gt;

&lt;p&gt;The following instructions can be used to get your first MSS stream running. We are assuming Linux, but these steps will work for Windows as well, replacing the âtargetFolderâ parameter path below with one appropriate for your Windows distribution.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Ensure that the EMS is running (see Installation and Startup above)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;We will assume here that GroupNameAliasing is off. This is the default, so if you have not made any configuration changes to the EWS, this will be true.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Pull in or obtain a source live stream (see âObtaining Sample Streamsâ above). We will assume your sample stream name is âtest1â&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[Optional] You can use VLC, or something similar, to validate your live stream:&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  rtmp://localhost/live/test1
  rtsp://localhost:5544/test1
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Use the createMSSStream call to start streaming MSS:&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  createmssstream localstreamnames=test1 targetfolder=/var/evo-webroot groupname=mss_group playlisttype=rolling cleanupdestination=1
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[Optional] You can validate the MSS is being created by looking on your server for the existence of this file:&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  /var/evo-webroot/mss_group/manifest.ismc
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Open a web-based MSS player, such as: &lt;a href=&quot;http://smf.cloudapp.net/healthmonitor&quot;&gt;http://smf.cloudapp.net/healthmonitor&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Replace the Stream URL with: &lt;a href=&quot;http://localhost:8888/mss_group/manifest.ismc&quot;&gt;http://localhost:8888/mss_group/manifest.ismc&lt;/a&gt; and hit âPlayâ&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;raw-rtp&quot;&gt;Raw RTP&lt;/h2&gt;

&lt;p&gt;The EMS can ingest raw, or unsolicited, RTP traffic. However, there are extra pieces of information that the EMS will need in order properly process a raw RTP stream. Typically this information is transferred out-of-band, either through (most commonly) RTSP, or through some other proprietary channel. Since we are operating outside of the bounds of RTSP, the data will need to be added to the pullStream command. The pullStream parameters &lt;code class=&quot;highlighter-rouge&quot;&gt;isAudio&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;audioCodecBytes&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;spsBytes&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;ppsBytes&lt;/code&gt; are used. Please see the API Description document for more details on these parameters.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pullstream uri=rtp://127.0.0.1:8888 localstreamname=rtptest isAudio=1 audioCodecBytes=1190
pullstream uri=rtp://127.0.0.1:8888 localstreamname=rtptest isAudio=0 spsBytes=Z0LAHpZiA2P8vCAAAAMAIAAABgHixck= ppsBytes=aMuMsg==
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;recording&quot;&gt;Recording&lt;/h2&gt;

&lt;p&gt;The EMS provides a convenient way to record any inbound live stream. Simply issue a &lt;code class=&quot;highlighter-rouge&quot;&gt;record&lt;/code&gt; API command to record any local stream:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;record localStreamName=Video1 pathtofile=/recording/path type=mp4|ts|flv overwrite=1
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;If you issue the record command for a stream that does not yet exist, EMS will queue the operation and will only start recording once the stream is available.&lt;/p&gt;

&lt;p&gt;Users can split a recording into multiple files (chunked recording) by using the &lt;em&gt;chunkLength&lt;/em&gt; parameter. By default this parameter is set to 0 (disabled) if not specified. If non-zero the record command will start a new recording file after chunkLength seconds have elapsed.&lt;/p&gt;

&lt;p&gt;In the example below, a new file will be created after 1 minute (60 seconds) has elapsed:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;record localStreamName=Video1 pathtofile=/recording/path type=mp4 chunkLength=60
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;video-on-demand-vod&quot;&gt;Video On Demand (VOD)&lt;/h2&gt;

&lt;p&gt;The EMS can generate streams from MP4, FLV, and MOV files. The specifics for doing this are described in the previous sections.&lt;/p&gt;

&lt;p&gt;The EMS supports VOD from the following file formats:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;FLV â Adobe/Flash style files&lt;/li&gt;
  &lt;li&gt;MP4 - .mp4, .mpv, .mpg4, etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The EMS provides a robust mechanism for storing Audio and Video files on disk for VOD playback. You may have your files in multiple locations, and those locations are permitted to be read-only for safety reasons, if you prefer. For each folder/location you must specify a &lt;em&gt;mediaStorage&lt;/em&gt; section in the config.lua file.&lt;/p&gt;

&lt;p&gt;Each mediaStorage section can have the following parameters:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Parameter&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Mandatory&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Default Value&lt;/th&gt;
      &lt;th&gt;Notes&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;mediaFolder&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;True&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;N/A&lt;/td&gt;
      &lt;td&gt;The full path to the folder you wish to use&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;description&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;False&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;ââ&lt;/td&gt;
      &lt;td&gt;A description for your folder location&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;metaFolder&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;False&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;mediaFolder location&lt;/td&gt;
      &lt;td&gt;The location where the EMS will create statistic, seek and meta files for each of the VOD files. The EMS must be able to write to this folder&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;enableStats&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;False&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;False&lt;/td&gt;
      &lt;td&gt;If true, the EMS will record statistics about each VOD file played. The stats will be kept in a .stats file named the same as the media file stored in the metaFolder and will include the number of times accessed and the amount of bytes served from it.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;clientSideBuffer&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;False&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;15&lt;/td&gt;
      &lt;td&gt;The number of seconds the EMS will buffer content when doing VOD playback for an RTMP client&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;keyFrameSeek&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;False&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;True&lt;/td&gt;
      &lt;td&gt;Seeking only occurs at key-frames if true. If false, seeking may occur on inter-frame packets, which may cause garbage to be shown on the client player until a keyframe is reached&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;seekGranularity&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;False&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;.01&lt;/td&gt;
      &lt;td&gt;The fidelity, in seconds, of seeking for the files in this mediaFolder.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;pseudo-vod&quot;&gt;Pseudo-VOD&lt;/h3&gt;

&lt;p&gt;There may be times that you will want to generate a âliveâ stream out of a file. There also may be a time where you need to create an &lt;strong&gt;MPEG-TS Stream&lt;/strong&gt; ( UDP broadcast/unicast/multicast) out of a file.&lt;/p&gt;

&lt;p&gt;This can be accomplished by performing an RTSP &lt;code class=&quot;highlighter-rouge&quot;&gt;pullStream&lt;/code&gt; command on a VOD file (see RTSP above), which then creates a new âliveâ inbound stream for the EMS. You can then either request that stream via RTMP/RTSP, or perform a &lt;code class=&quot;highlighter-rouge&quot;&gt;pushStream&lt;/code&gt; command to push it out as any of the other protocols. If, for example, you have the mp4 file testFile.mp4, you can create a MPEG-TS UDP Multicast stream from it using the following sequence:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pullstream uri=rtsp://localhost:5544/vod/testFile.mp4 localstreamname=TestMulticast
pushstream uri=mpegtsudp://229.0.0.1:5555 localstreamname=TestMulticast
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;peer-to-peer&quot;&gt;Peer to Peer&lt;/h2&gt;

&lt;p&gt;The EMS supports direct peering to HTML5 browsers and devices that support WebRTC. Over the WebRTC channel, the EMS streams low-latency (sub-second) H.264 video and AAC audio for delivery directly to the HTML5 video player.&lt;/p&gt;

&lt;p&gt;By moving the streaming directly between the end client and the stream originator (for example, a security camera) you remove the largest cost driver of hosting any kind of live streaming service: the bandwidth cost!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/ems_user_guide/assets/proto1.png&quot; alt=&quot;PROTO-FIG1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Peer to peer works when the &lt;em&gt;EMS is installed and running on the camera, wearable or other such stream creation device&lt;/em&gt;. Here is the simplified work flow for Peer to Peer:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;The EMS is configured to communicate with an &lt;strong&gt;EvoStream Rendezvous Server&lt;/strong&gt; (ERS). The EMS will maintain that connection to the ERS while it waits for a peer request. The configuration specifies a unique âRoomâ in which it is waiting.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A WebRTC enabled browser/app will connect to a Web Server (either the one provided by the ERS or one of your choosing) and downloads a player page, including the EvoStream provided JavaScript Peering Code.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The browser loads the JavaScript, which has been pre-configured by the Web Server with a) an IP address of the ERS to connect to and b) a âRoomâ to connect to&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The browser connects to the ERS and requests to join the âRoomâ&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The EMS (on the camera) and the Browser share peering information across the ERS connection.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Using the peering information, the peer connection is established directly between EMS and the Browser and streaming proceeds.&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  startWebRTC ersIP=52.6.14.61 ersPort=3535 roomID=YourRoom
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;EvoStream provides a hosted EvoStream Rendezvous Server at &lt;strong&gt;52.6.14.61:3535&lt;/strong&gt;. This server can be used for testing and for deployment. This can be used with the EMS by issuing the following API command:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;It is VERY IMPORTANT TO NOTE:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;This is a public ERS, and so many people may be using it&lt;/li&gt;
  &lt;li&gt;If your RoomID is not unique, it will result in race conditions with other users. You may end up seeing their streams or they may see yours!&lt;/li&gt;
  &lt;li&gt;EvoStream intends to make this ERS available at all times, but its uptime is NOT Guaranteed!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For production deployments of Peer To Peer you will want to host your own ERS, or have EvoStream host a separate ERS on your behalf. Please contact EvoStream for more information.&lt;/p&gt;

&lt;h3 id=&quot;getting-started-with-peer-to-peer&quot;&gt;Getting Started with Peer to Peer&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Peer to Peer streaming uses the EvoStream HTML5 Streaming capabilities. It is recommended you also review the HTML5 Streaming section.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The EvoStream hosted ERS provides a sample HTML5 WebRTC player:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[http://ers.evostream.com:5050/demo/evowrtcclient.html?stream=YOURSTREAM&amp;amp;room=ROOMID](http://ers.evostream.com:5050/demo/evowrtcclient.html?stream=YOURSTREAM&amp;amp;room=ROOMID)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;ROOMID will need to be changed to the RoomID youâve used in your StartWebRTC command&lt;/p&gt;

&lt;p&gt;YOURSTREAM will need to be changed to the localStreamName you wish to play&lt;/p&gt;

&lt;p&gt;You can follow these steps to get your first Peer to Peer session started. &lt;em&gt;Again, please remember to choose a unique RoomID so that you donât collide with other users!&lt;/em&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Run the EMS and bring in a live stream. (See the Getting Started Streaming section.) Weâll assume a stream name of âtest1â.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Issue the EMS a StartWebRTC Command:&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  startWebRTC ersIP=52.6.14.61 ersPort=3535 roomID=[replaceWithYourRoomID]
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;On a supported browser, go to the link:
      [http://ers.evostream.com:5050/demo/evowrtcclient.html?stream=test1&amp;amp;room=&lt;a href=&quot;http://ers.evostream.com:5050/demo/evowrtcclient.html?stream=test1&amp;amp;room=%5BreplaceWithYourRoomID&quot;&gt;replaceWithYourRoomID&lt;/a&gt;]&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Press play and enjoy!&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;peer-to-peer-browser-compatibility&quot;&gt;Peer To Peer Browser Compatibility&lt;/h3&gt;

&lt;p&gt;The following diagram shows the compatibility of various browsers with the EvoStream Peer to Peer feature. This diagram is accurate as of November 2015. An updated version of this diagram is available here: &lt;a href=&quot;https://evostream.com/features/peer-to-peer&quot;&gt;https://evostream.com/features/peer-to-peer&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/ems_user_guide/assets/proto2.png&quot; alt=&quot;PROTO-FIG2&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;firefox-configuration-changes-1&quot;&gt;Firefox Configuration Changes&lt;/h3&gt;

&lt;p&gt;The following configuration changes must be made to Firefox before it will work with HTML5 playback and Peer to Peer:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;In the firefox address field enter: about:config
    &lt;ul&gt;
      &lt;li&gt;Click âIâll be careful I promise!â&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Locate the following variables and set them (double-click) as necessary to match:
    &lt;ul&gt;
      &lt;li&gt;media.mediasource.enabled = true&lt;/li&gt;
      &lt;li&gt;media.mediasource.whitelist = false&lt;/li&gt;
      &lt;li&gt;media.mediasource.mp4.enabled = true&lt;/li&gt;
      &lt;li&gt;media.fragmented-mp4.exposed = true&lt;/li&gt;
      &lt;li&gt;media.fragmented-mp4.ffmpeg.enabled = true&lt;/li&gt;
      &lt;li&gt;media.fragmented-mp4.gmp.enabled = true&lt;/li&gt;
      &lt;li&gt;media.fragmented-mp4.use-blank-decoder = false&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Restart Firefox to activate these changes&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
        <link>http://docs.evostream.com/ems_user_guide/protocolsupport</link>
        <guid isPermaLink="true">http://docs.evostream.com/ems_user_guide/protocolsupport</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>Document Definitions</title>
        <description>&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;TERM&lt;/th&gt;
      &lt;th&gt;DEFINITION&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;CDN&lt;/td&gt;
      &lt;td&gt;Content Delivery Network â Servers with high availability and high performance for distributing content to end-users thru the internet.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;DASH&lt;/td&gt;
      &lt;td&gt;Dynamic Adaptive Streaming over HTTP â HTTP adaptive bitrate streaming defined by Motion Pictures Experts Group (MPEG).&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;EMS&lt;/td&gt;
      &lt;td&gt;EvoStream Media Server&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ERS&lt;/td&gt;
      &lt;td&gt;EvoStream Rendezvous Server&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;EWS&lt;/td&gt;
      &lt;td&gt;EvoStream Web Server&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;HDS&lt;/td&gt;
      &lt;td&gt;HTTP Dynamic Streaming â HTTP adaptive bitrate streaming defined by Adobe.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;HLS&lt;/td&gt;
      &lt;td&gt;HTTP Live Stream â HTTP adaptive bitrate streaming defined by Apple&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;HTTP&lt;/td&gt;
      &lt;td&gt;Hypertext Transfer Protocol. The protocol used for standard web pages. Also used for tunneling by many protocols. TCP based.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;IDR&lt;/td&gt;
      &lt;td&gt;Instantaneous Decoding Refresh â This is a specific packet in the H.264 video encoding specification. It is a full snapshot of the video at a specific instance (one full frame). Video players require an IDR frame to start playing any video. âFramesâ that occur between IDR Frames are simply offsets/differences from the first IDR.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;JSON&lt;/td&gt;
      &lt;td&gt;JavaScript Object Notation&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Lua&lt;/td&gt;
      &lt;td&gt;A lightweight multi-paradigm programming language&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;MSS&lt;/td&gt;
      &lt;td&gt;Microsoft Smooth Streaming â HTTP adaptive bitrate streaming defined by Microsoft.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;RTCP&lt;/td&gt;
      &lt;td&gt;Real Time Control Protocol â An protocol that is typically used with RTSP to synchronize two RTP streams, often audio and video streams&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;RTMP&lt;/td&gt;
      &lt;td&gt;Real Time Messaging Protocol â Used with Adobe Flash players&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;RTMPT&lt;/td&gt;
      &lt;td&gt;Real Time Messaging Protocol Tunneled â Essentially RTMP over HTTP&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;RTP&lt;/td&gt;
      &lt;td&gt;Real-Time Transport Protocol â A simple protocol used to stream data, typically audio or video data.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;RTSP&lt;/td&gt;
      &lt;td&gt;Real Time Streaming Protocol â Used with Android devices and live streaming clients like VLC or QuickTime. RTSP does not actually transport the audio/video data, it is simply a negotiation protocol. It is normally paired with a protocol like RTP, which will handle the actual data transport.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;swfURL&lt;/td&gt;
      &lt;td&gt;Used in the RTMP protocol, this field is used to designate the URL/address of the Adobe Flash Applet being used to generate the stream (if any).&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;tcURL&lt;/td&gt;
      &lt;td&gt;Used in the RTMP protocol, this field is used to designate the URL/address of the originating stream server.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;URI&lt;/td&gt;
      &lt;td&gt;Universal Resource Identifier â The generic form of a âURLâ. URIâs are used to specify the location and type of streams, e.g. ârtmp://localhost/live/stream1â.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;URL&lt;/td&gt;
      &lt;td&gt;Uniform Resource Locator â This is a specific form of the URI used for web browsing, e.g. âhttps://www.youtube.com/watch?v=TDuvBurbjVUâ.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;VOD&lt;/td&gt;
      &lt;td&gt;Video On Demand&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;purpose&quot;&gt;Purpose&lt;/h2&gt;

&lt;p&gt;This document provides instructions on how to use the EvoStream Media Server (EMS). It will cover the basics of starting the server as well as some advanced topics like modifying configuration files&lt;/p&gt;

&lt;p&gt;This document is written for users of the EMS. It is expected that readers have a basic understanding of multimedia streaming and the technologies required to perform multimedia streaming.&lt;/p&gt;

&lt;h2 id=&quot;evostream-media-server&quot;&gt;EvoStream Media Server&lt;/h2&gt;

&lt;h3 id=&quot;a-what-is-ems&quot;&gt;A. What is EMS?&lt;/h3&gt;

&lt;p&gt;EvoStream is an enterprise-strength media server capable of delivering live and on-demand content to any screen with an unbeatable cost of ownership.  With EvoStream, audio/video/data delivery can be expanded to all popular media platforms including AdobeÂ® FlashÂ®, AppleÂ® iOS devices and QuickTime, IPTV, MicrosoftÂ® SilverlightÂ®, Android, BlackberryÂ®, and other 3GPP devices into a single workflow.&lt;/p&gt;

&lt;h3 id=&quot;b-why-use-ems&quot;&gt;B. Why Use EMS?&lt;/h3&gt;

&lt;p&gt;EvoStreamâs unique architecture significantly increases I/O performance compared to Java-based media servers, and is the only unified media server capable of running on virtually any platform (Linux, Windows, Mac OSX, etc.) including embedded devices (encoders, IP cameras, DVRs, and more).&lt;/p&gt;

&lt;h3 id=&quot;c-what-are-the-key-features-and-benefits-of-the-ems&quot;&gt;C. What are the Key Features and Benefits of the EMS?&lt;/h3&gt;

&lt;p&gt;EvoStream Media Server is not just a multi-format, multi-protocol server that delivers media rich content across multiple screens and platforms. It delivers enterprise strength content at a cost-lowering performance. Simply put, EvoStream is the most efficient and flexible streaming server available. It delivers enterprise strength content at a cost-lowering performance. For a better understanding, refer to the picture and descriptions below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/ems_user_guide/assets/intro1.png&quot; alt=&quot;INTRO-FIG1&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Next Generation Streaming&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Stream directly to HTML5 browsers with &lt;strong&gt;sub-second&lt;/strong&gt; latency! No Plugins, No custom apps!&lt;/li&gt;
      &lt;li&gt;Peer to peer streaming eliminating the vast majority of operating costs!&lt;/li&gt;
      &lt;li&gt;Metadata delivered in frame-aligned real-time&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Highly Efficient&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The EMS has the smallest CPU and memory footprint possible while still being capable of handling approximately &lt;strong&gt;2,000 simultaneous connections&lt;/strong&gt; per Intel style CPU core. In other words, &lt;strong&gt;never&lt;/strong&gt; max out on hardware resources before reaching bandwidth limitations.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Extensible&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Never write custom modules again or be limited to a single programming language to extend server functionality for applications and infrastructure. The EMS has a diverse set of run-time APIs including standard HTTP calls, PHP, Lua, or C++, allowing for quick and easy integration of EvoStream into existing workflows.&lt;/p&gt;

&lt;p&gt;Along with the Runtime API, the EMS also provides an Event Notification System, which allows users to completely tailor the behavior of the EMS. Automate stream routing, dynamically create HLS or HDS, or simply monitor server activities with a simple RESTful monitor!&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Cross Platform&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Built from the ground-up to be truly platform agnostic and capable of being delivered on virtually any operating system including embedded systems such as encoders, IP cameras, DVRs, and more!&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Scalable&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Whether serving a few users to hundreds of thousands, EvoStream can meet live and on-demand streaming needs through robust load-balancing allowing the infrastructure to infinitely scale as needed while keeping the hardware and licensing costs at an absolute minimum.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Reliable&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Proven and tested under high-traffic environments and deployed worldwide by enterprise content publishers and service providers that demand maximum uptime and reliability.&lt;/p&gt;

&lt;h3 id=&quot;d-how-does-the-ems-work&quot;&gt;D. How Does the EMS Work?&lt;/h3&gt;

&lt;p&gt;EvoStream Media Server runs as a separate application which users can send video and audio streams to. Users can then connect to the EMS with a variety of players or other servers and use the Runtime API to push streams out or pull new streams in.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Stream Routing&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;EvoStreamâs rich set of APIs includes &lt;strong&gt;pull/push streaming&lt;/strong&gt;, which allows users to easily publish or consume RTMP/RTSP/HLS/MPEG-TS/etc streams to and from other locations such as a CDN or a service provider.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/ems_user_guide/assets/intro2.png&quot; alt=&quot;INTRO-FIG2&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;e-where-will-ems-run&quot;&gt;E. Where will EMS Run?&lt;/h3&gt;

&lt;p&gt;On practically everything! It runs on Windows, Linux, Mac OSX, BSD and Solaris. It can be hosted on a robust server or on a small ARM based IP Camera, or anything in-between.&lt;/p&gt;

&lt;p&gt;Specifically, the EMS can be run on:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;WindowsÂ®: 10 x64, 8.1 x64, 8 x64, 7 x64, Server 2008 x64, Server 2012&lt;/li&gt;
  &lt;li&gt;Linux: Debian, CentOS, RedHat, Ubuntu, openSUSE, and others&lt;/li&gt;
  &lt;li&gt;Mac OSX&lt;/li&gt;
  &lt;li&gt;FreeBSD&lt;/li&gt;
  &lt;li&gt;OpenBSD&lt;/li&gt;
  &lt;li&gt;Raspbian&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
        <link>http://docs.evostream.com/ems_user_guide/introduction</link>
        <guid isPermaLink="true">http://docs.evostream.com/ems_user_guide/introduction</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>Interoperability</title>
        <description>&lt;h2 id=&quot;stream-sources&quot;&gt;Stream Sources&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Flash Media Live Encoder (FMLE) â RTSP, RTMP, MPEG-TS
Flash Media Server (FMS) â RTSP, RTMP, MPEG-TS
Discover Video Multimedia Encoder (DVME) â RTSP, RTMP, MPEG-TS
VLC â RTSP, RTMP, Mpeg-TS
Wowza â RTSP, RTMP, Mpeg-TS
FFMpeg â MPEG-TS, RTSP
BRIA SIP Server â RTSP
IPCamera â RTSP
Wirecast â RTMP
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;stream-players&quot;&gt;Stream Players&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;RTMP (Flash) â Adobe Flash Player, JW Player, ffPlay, Flowplayer
RTSP â Android phones (v2.3.5 or later),VLC, QuickTime, ffPlay
MPEG-TS â VLC, ffPlay
HLS â All iOS devices, iPhone, iPad, iPod Touch, JW Player
HDS â OSMF
MSS â SilverLight
DASH â GPAC, Digital Primates, castLabs DASHas
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;akamai&quot;&gt;Akamai&lt;/h2&gt;

&lt;p&gt;Akamai requires very specific settings when pushing a stream to your account. The &lt;code class=&quot;highlighter-rouge&quot;&gt;pushStream&lt;/code&gt; command for pushing to Akamai must look like the following:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pushStream uri=rtmp://AkamaiUserName:AkamaiPass@YOUR.akamaientrypoint.net/EntryPoint localStreamname=YourLocalStream targetStreamName=XX_YY_ZZ@WW emulateUserAgent=FMLE/3.0\ (compatible;\ FMSc/1.0)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;AkamaiuserName, AkamaiPass, &lt;code class=&quot;highlighter-rouge&quot;&gt;YOUR.akamaientrypoint.net&lt;/code&gt; all must be the values assigned to you by Akamai.&lt;/p&gt;

&lt;p&gt;For the &lt;code class=&quot;highlighter-rouge&quot;&gt;targetStreamName&lt;/code&gt;, xx, yy, zz are arbitrary strings, but Akamai requires there to be exactly two â_â in the stream name. @ww is a unique number used in combination with username/password to allow/disallow the publish operation. It is mandatory and is provided to you by Akamai.&lt;/p&gt;

&lt;p&gt;The EMS can also push to the new RTMP HD publishing points in Akamai. You need to set the parameter &lt;code class=&quot;highlighter-rouge&quot;&gt;sendChunkSizeRequest&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt; for Akamai to accept the connection. The &lt;code class=&quot;highlighter-rouge&quot;&gt;pushStream&lt;/code&gt; command for this looks like the following:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pushStream uri=rtmp://AkamaiUserName:AkamaiPass@YOUR.akamaientrypoint.net/EntryPoint localStreamname=YourLocalStream targetStreamName=XX_YY_ZZ@WW emulateUserAgent=FMLE/3.0\ (compatible;\ FMSc/1.0) sendChunkSizeRequest=0
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;other-cdns&quot;&gt;Other CDNs&lt;/h2&gt;

&lt;p&gt;The EMS allows you to publish your streams to a wide variety of CDNs. These include:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;YouTubeLive&lt;/li&gt;
  &lt;li&gt;Limelight&lt;/li&gt;
  &lt;li&gt;Twitch.tv&lt;/li&gt;
  &lt;li&gt;EdgeCast&lt;/li&gt;
  &lt;li&gt;And many more!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Often times pushing streams to these CDNs is very simple and only requires you to add your username and password to the RTMP pushStream command (See RTMP section above). For many of these CDNs, you will need to specify emulateUserAgent in your pushStream command. An example pushStream command is as follows:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pushStream uri=rtmp://UserName:Pass@EntryPoint localStreamname=YourLocalStream targetStreamName=UsuallySpecifiedInYourAccount emulateUserAgent=FMLE
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;miscellaneous-examples&quot;&gt;Miscellaneous Examples&lt;/h2&gt;

&lt;p&gt;To play an mpegts stream in VLC, use:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;udp://@239.1.1.1:1234
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;To create a stream out of a file with ffmpeg, use:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ffmpeg -re -i myMovie.mp4 -acodec copy -vcodec copy -f mpegts -vbsf h264_mp4toannexb &quot;udp://192.168.1.16:5555/&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;To play HLS, send telnet command to EMS:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Create HLS:&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; createhlsstream localstreamnames=teststream targetfolder=/var/evo-webroot groupname=testgroup playlisttype=rolling
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Verify: Check if .ts files are generated inside targetfolder.&lt;/li&gt;
  &lt;li&gt;Play: In the browser, type the complete URI of the âtargetfolder/groupnameâ where &lt;code class=&quot;highlighter-rouge&quot;&gt;playlist.m3u8&lt;/code&gt; is located.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;PLEASE SEE THE âHOW TOâ DOCUMENT FOR MORE EXCELLENT EXAMPLES!&lt;/strong&gt;&lt;/p&gt;

</description>
        <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
        <link>http://docs.evostream.com/ems_user_guide/interoperability</link>
        <guid isPermaLink="true">http://docs.evostream.com/ems_user_guide/interoperability</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>Installation and Startup</title>
        <description>&lt;h2 id=&quot;obtain-a-license&quot;&gt;Obtain a License&lt;/h2&gt;

&lt;p&gt;A license file is required to run EMS. EvoStream offers 30-day trial licenses which can be obtained from the EvoStream website: &lt;a href=&quot;https://evostream.com/free-trial/&quot;&gt;https://evostream.com/free-trial/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The EMS itself can be downloaded here: &lt;a href=&quot;https://evostream.com/support/software-downloads/&quot;&gt;https://evostream.com/support/software-downloads/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Licenses can be purchased from EvoStream directly, contact &lt;a href=&quot;&amp;#109;&amp;#097;&amp;#105;&amp;#108;&amp;#116;&amp;#111;:&amp;#115;&amp;#097;&amp;#108;&amp;#101;&amp;#115;&amp;#064;&amp;#101;&amp;#118;&amp;#111;&amp;#115;&amp;#116;&amp;#114;&amp;#101;&amp;#097;&amp;#109;&amp;#046;&amp;#099;&amp;#111;&amp;#109;&quot;&gt;&amp;#115;&amp;#097;&amp;#108;&amp;#101;&amp;#115;&amp;#064;&amp;#101;&amp;#118;&amp;#111;&amp;#115;&amp;#116;&amp;#114;&amp;#101;&amp;#097;&amp;#109;&amp;#046;&amp;#099;&amp;#111;&amp;#109;&lt;/a&gt;, or via the EvoStream Website: &lt;a href=&quot;https://evostream.com/pricing/&quot;&gt;https://evostream.com/pricing/&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;install-ems&quot;&gt;Install EMS&lt;/h2&gt;

&lt;h3 id=&quot;installation-for-linux-package&quot;&gt;Installation for Linux (Package)&lt;/h3&gt;

&lt;p&gt;EvoStream provides standard Linux installers for the EMS. The Linux EMS installer will install the following packages and software:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;EvoStream Media Server (EMS)&lt;/li&gt;
  &lt;li&gt;EvoStream Web Server (EWS)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To use the Linux installers, you must follow these instructions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pre-requisites:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Administrative privileges are required. This can be accomplished in many ways.&lt;/p&gt;

&lt;p&gt;If the sudo utility is available:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ su â
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;If the sudo utility is not available:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo su â
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The prompt changes from &lt;code class=&quot;highlighter-rouge&quot;&gt;$&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;#&lt;/code&gt; when administrative privileges are enabled.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Installation Procedure:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;1. Retrieve the script used to install the EvoStream software repository and store it&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Debian based Linux distributions (Ubuntu or Debian)&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    # wget http://apt.evostream.com/installkeys.sh -O /tmp/installkeys.sh
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;RedHat based Linux distributions (CentOS, Fedora, RHEL)&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    # curl http://yum.evostream.com/installkeys.sh -o /tmp/installkeys.sh
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;2. Execute the script to install the EvoStream software repository and keys&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;     # sh /tmp/installkeys.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;If successful, the following message should be printed on the console:&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &quot;EvoStream keys installed successfully&quot;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At this stage, the EvoStream software repository and keys are successfully installed and you can install packages from it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Steps 1 and 2 above must be executed only once.&lt;/p&gt;

&lt;p&gt;The following steps are used to install the EvoStream Media Server, and can be repeated to update the EMS to the most recent release.&lt;/p&gt;

&lt;p&gt;3. Install EvoStream Media Server.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Debian based Linux distributions (Ubuntu or Debian)&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    # apt-get install evostream-mediaserver
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;RedHat based Linux distributions (CentOS, Fedora, RHEL)&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    # yum install evostream-mediaserver
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;4. Install the license file. Copy the License.lic file into &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/evostream&lt;/code&gt; folder&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;     # cp /path/to/License.lic /etc/evostream/License.lic
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;5. Run EvoStream Media Server&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;To start EMS in console mode&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    # service evostreamms start_console
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;To start EMS as a daemon background process&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    # service evostreamms start
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;To restart EMS (will restart as daemon)&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    # service evostreamms restart
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;To stop EMS&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    # service evostreamms stop
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;installation-for-linux-archive&quot;&gt;Installation for Linux (Archive)&lt;/h3&gt;

&lt;p&gt;You can install the EMS from a simple archive file (.tar.gz). The latest EMS Release can be found on the EvoStream website: &lt;a href=&quot;https://evostream.com/software-downloads/&quot;&gt;https://evostream.com/software-downloads/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You will need to choose the most appropriate distribution for the Operating System that you are using. Once you have downloaded your distribution:&lt;/p&gt;

&lt;p&gt;Simply extract the EMS package. The location of the installation is not important. However, for security reasons, the EvoStream Media Server should &lt;strong&gt;not&lt;/strong&gt; be installed into the web-root of the target computer (if one exists).&lt;/p&gt;

&lt;h3 id=&quot;installation-for-windows&quot;&gt;Installation for WindowsÂ®&lt;/h3&gt;

&lt;p&gt;The latest EMS Release can be found on the EvoStream website: &lt;a href=&quot;https://evostream.com/software-downloads/&quot;&gt;https://evostream.com/software-downloads/&lt;/a&gt;. Choose the most appropriate distribution for the Operating System that you are using. Once you have downloaded your distribution, simply extract the EMS package to a temporary folder.&lt;/p&gt;

&lt;p&gt;Run &lt;strong&gt;setup.exe&lt;/strong&gt; to install EMS.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;See the Quick Start Guide document for the detailed installation instructions.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;other-installers&quot;&gt;Other Installers&lt;/h3&gt;

&lt;p&gt;If you cannot find a suitable distribution, please contact us at &lt;a href=&quot;&amp;#109;&amp;#097;&amp;#105;&amp;#108;&amp;#116;&amp;#111;:&amp;#115;&amp;#097;&amp;#108;&amp;#101;&amp;#115;&amp;#064;&amp;#101;&amp;#118;&amp;#111;&amp;#115;&amp;#116;&amp;#114;&amp;#101;&amp;#097;&amp;#109;&amp;#046;&amp;#099;&amp;#111;&amp;#109;&quot;&gt;&amp;#115;&amp;#097;&amp;#108;&amp;#101;&amp;#115;&amp;#064;&amp;#101;&amp;#118;&amp;#111;&amp;#115;&amp;#116;&amp;#114;&amp;#101;&amp;#097;&amp;#109;&amp;#046;&amp;#099;&amp;#111;&amp;#109;&lt;/a&gt;, and we can possibly provide a custom compilation for the Operating System of your choice.&lt;/p&gt;

&lt;h2 id=&quot;platform-verification&quot;&gt;Platform Verification&lt;/h2&gt;

&lt;p&gt;If you are unsure if the distribution you downloaded is appropriate for your Operating System, you can use the &lt;code class=&quot;highlighter-rouge&quot;&gt;platformTests&lt;/code&gt; program. This program is available with all distributions and provides a suite of platform compatibility tests. It can be found in the bin directory.&lt;/p&gt;

&lt;p&gt;On all systems, open a console or terminal (command prompt) and run the &lt;code class=&quot;highlighter-rouge&quot;&gt;platformTests&lt;/code&gt; executable (&lt;code class=&quot;highlighter-rouge&quot;&gt;./platformTests&lt;/code&gt;). It will print out the results of the platform compatibility tests. If the test succeeds, then you have an appropriate distribution!&lt;/p&gt;

&lt;h2 id=&quot;linux-limitations&quot;&gt;Linux Limitations&lt;/h2&gt;

&lt;p&gt;Linux systems place limits on the number of sockets and file descriptors a process may use. This will apply to the EMS as well. If you plan on using more than 1024 connections at one time for your server, you will need to modify the following configuration file: &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/security/limits.conf&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The following lines will need to be added/modified:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;soft nofile 16384
hard nofile 65536
soft nproc 4096
hard nproc 16384
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;distribution-content&quot;&gt;Distribution Content&lt;/h2&gt;

&lt;h3 id=&quot;linux-package&quot;&gt;Linux Package&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/
âââ etc
â   âââ evostreamms
â       âââ blacklist.txt
â       âââ config.lua
â       âââ server.cert
â       âââ server.key
â       âââ users.lua
â       âââ webconfig.lua
â       âââ whitelist.txt
âââ usr
â   âââ bin
â   â   âââ evo-phpengine
â   â   â   âââ php.cgi
â   â   âââ evo-avconv
â   â   âââ evo-mp4writer
â   â   âââ evostreamms
â   â   âââ evo-webserver
â   âââ share
â       âââ evo-avconv
â       â   âââ presets
â       â       âââ [30 transcode preset files]
â       âââ doc
â           âââ evostreamms
â               âââ copyright
â               âââ EvoStream Media Server EULA v2.pdf
â               âââ README.txt
â               âââ version
â                   âââ BUILD_DATE
â                   âââ BUILD_NUMBER
â                   âââ CODE_NAME
â                   âââ OS_NAME
â                   âââ OS_VERSION
â                   âââ RELEASE_NUMBER
âââ var
    âââ evostreamms
    â   âââ media
    â   âââ xml
    â       âââ auth.xml
    â       âââ bandwidthlimits.xml
    â       âââ connlimits.xml
    â       âââ ingestpoints.xml
    â       âââ pushPullSetup.xml
    âââ evo-webroot
    â   âââ demo
    â   â   âââ css
    â   â   âââ evo.png
    â   â   âââ evowrtcclient.html
    â   â   âââ evowsvideo.html
    â   â   âââ jsonMetaTest.html
    â   â   âââ jsonMetaWriteTest.html
    â   â   âââ loading.gif
    â   âââ EMS_Web_UI
    â   â   âââ css
    â   â   âââ img
    â   â   âââ js
    â   â   âââ php
    â   â   âââ phpacct
    â   â   âââ settings
    â   â   âââ swf
    â   â   âââ evo.png
    â   â   âââ evostream_copyright.txt
    â   â   âââ index.php
    â   â   âââ install_license.php
    â   â   âââ license.txt
    â   â   âââ loading.gif
    â   â   âââ navbar.php
    â   â   âââ README.txt
    â   â   âââ README[Enable_Login_Authentication].txt
    â   â   âââ style.css
    â   âââ evowebservices
    â   â   âââ config
    â   â   âââ core
    â   â   âââ plugins
    â   â   âââ evostream_copyright.txt
    â   â   âââ evowebservices.php
    â   â   âââ README.txt
    â   âââ clientaccesspolicy.xml
    â   âââ crossdomaim.xml
    âââ log
    â   âââ evostreamms
    âââ run
        âââ evostreamms
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;linux-archive&quot;&gt;Linux Archive&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./EvoStream Archive
  âââ bin
  â   âââ evo-phpengine
  â   âââ emsTranscoder.sh
  â   âââ evo-avconv
  â   âââ evo-mp4writer
  â   âââ evostreamms
  â   âââ evo-webserver
  â   âââ platformTests
  â   âââ run_console_ems.sh
  â   âââ run_daemon_ems.sh
  âââ config
  â   âââ auth.xml
  â   âââ bandwidthlimits.xml
  â   âââ blacklist.txt
  â   âââ config.lua
  â   âââ connlimits.xml
  â   âââ ingestpoints.cml
  â   âââ pushPullSetup.xml
  â   âââ server.cert
  â   âââ server.key
  â   âââ users.lua
  â   âââ webconfig.lua
  â   âââ whitelist.txt
  âââ demo
  â   âââ base64.js
  â   âââ emsdemo.html
  âââ evo-avconv-presets
  â   âââ [30 transcode preset files]
  âââ evo-webroot
      âââ demo
      â   âââ css
      â   âââ evo.png
      â   âââ evowrtcclient.html
      â   âââ evowsvideo.html
      â   âââ jsonMetaTest.html
      â   âââ jsonMetaWriteTest.html
      â   âââ loading.gif
      âââ EMS_Web_UI
      â   âââ css
      â   âââ img
      â   âââ js
      â   âââ php
      â   âââ phpacct
      â   âââ settings
      â   âââ swf
      â   âââ evo.png
      â   âââ evostream_copyright.txt
      â   âââ index.php
      â   âââ install_license.php
      â   âââ loading.gif
      â   âââ license.txt
      â   âââ navbar.php
      â   âââ README.txt
      â   âââ README[Enable_Login_Authentication].txt
      â   âââ style.css
      âââ evowebservices
      â   âââ config
      â   âââ core
      â   âââ plugins
      â   âââ EMS_Web_Services_User_Guide.pdf
      â   âââ evostream_copyright.txt
      â   âââ evowebservices.php
      âââ clientaccesspolicy.xml
      âââ crossdomain.xml
  âââ logs
  âââ media
  âââ BUILD_DATE
  âââ Evostream Media Server EULA v2.pdf
  âââ README.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;windows-package&quot;&gt;Windows Package&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;C:\EvoStream
   âââ config
   â   âââ auth.xml
   â   âââ bandwidthlimits.xml
   â   âââ blacklist.txt
   â   âââ config.lua
   â   âââ connlimits.xml
   â   âââ ingestpoints.cml
   â   âââ pushPullSetup.xml
   â   âââ server.cert
   â   âââ server.key
   â   âââ users.lua
   â   âââ webconfig.lua
   â   âââ whitelist.txt
   âââ demo
   â   âââ base64.js
   â   âââ emsdemo.html
   âââ evo-avconv-presets
   â   âââ [30 transcode preset files]
   âââ evo-phpengine
   âââ evo-webroot
       âââ demo
       â   âââ css
       â   âââ evo.png
       â   âââ evowrtcclient.html
       â   âââ evowsvideo.html
       â   âââ jsonMetaTest.html
       â   âââ jsonMetaWriteTest.html
       â   âââ loading.gif
       âââ EMS_Web_UI
       â   âââ css
       â   âââ img
       â   âââ js
       â   âââ php
       â   âââ phpacct
       â   âââ settings
       â   âââ swf
	   â   âââ evo.png
       â   âââ evostream_copyright.txt
       â   âââ index.php
       â   âââ install_license.php
       â   âââ license.txt
       â   âââ loading.gif
       â   âââ navbar.php
       â   âââ README.txt
       â   âââ README[Enable_Login_Authentication].txt
       â   âââ style.css
       âââ evowebservices
       â   âââ config
       â   âââ core
       â   âââ plugins
       â   âââ evostream_copyright.txt
       â   âââ evowebservices.php   
       â   âââ README.txt
       âââ clientaccesspolicy.xml
       âââ crossdomain.xml
   âââ logs
   âââ media
   âââ services
   âââ emsTranscoder.bat
   âââ evo-avconv.exe
   âââ evo-mp4writer.exe
   âââ Evostream Media Server EULA v2.pdf
   âââ evostreamms.exe
   âââ evo-webserver.exe
   âââ libgcrypt-20.dll
   âââ libgmp-10.dll
   âââ libgnutls-28.dll
   âââ libgpg-error6-0.dll
   âââ libhogweed-2-5.dll
   âââ libiconv-2.dll
   âââ libmicrohttpd-12.dll
   âââ libnettle-4-7.dll
   âââ README.txt
   âââ run_console_ems.bat
   âââ tests.exe
   âââ unins000.dat
   âââ unins000.exe
   âââ zlib1.dll
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;file-descriptions&quot;&gt;File Descriptions&lt;/h2&gt;

&lt;h3 id=&quot;command-files&quot;&gt;Command Files&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;File&lt;/th&gt;
      &lt;th&gt;Description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;evostreamms(.exe)&lt;/td&gt;
      &lt;td&gt;The EvoStream binary itself&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;evo-webserver(.exe)&lt;/td&gt;
      &lt;td&gt;The EvoStream Web Server (EWS) binary. This handles the serving of all files over HTTP&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;evo-mp4writer(.exe)&lt;/td&gt;
      &lt;td&gt;This binary application combines the various pieces of each MP4 recording once the file is ready to be finalized&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;evo-avconv(.exe)&lt;/td&gt;
      &lt;td&gt;The EvoStream Transcoder binary. This gets called in reaction to the &lt;code class=&quot;highlighter-rouge&quot;&gt;transcode&lt;/code&gt; API command&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;run_daemon_ems.sh&lt;/td&gt;
      &lt;td&gt;Shell script used on &lt;strong&gt;Linux/Unix&lt;/strong&gt; environments to start the EMS as a background application. Use this for production deployments. It requires that the user âevostreamâ exists, the script will not work without it. Please feel free to modify this script to use a different user. When using the daemon script, to validate that the server is running, you can issue the command &lt;code class=&quot;highlighter-rouge&quot;&gt;ps âef&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;run_console_ems.bat&lt;/td&gt;
      &lt;td&gt;Batch file/script on &lt;strong&gt;Windows&lt;/strong&gt; which runs the EMS as a console application. This is useful for new users as it provides instant feedback on the console when commands are entered and shows errors if they occur in new streams.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;create.bat&lt;/td&gt;
      &lt;td&gt;Script to create a &lt;strong&gt;Windows&lt;/strong&gt; service for the EMS. This will also start the EMS as a background process. This must be run with Administrative privileges as it writes to the Windows Registry. &lt;em&gt;This only needs to be run once.&lt;/em&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;remove.bat&lt;/td&gt;
      &lt;td&gt;Script to remove the &lt;strong&gt;Windows&lt;/strong&gt; service for the EMS and remove the relevant Windows Registry entries. This must be run with Administrative privileges.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;start.bat&lt;/td&gt;
      &lt;td&gt;Script to start the EMS &lt;strong&gt;Windows&lt;/strong&gt; service. This script will not work if create.bat has not been run first.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;stop.bat&lt;/td&gt;
      &lt;td&gt;Script to stop the EMS &lt;strong&gt;Windows&lt;/strong&gt; Service.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Srvany.exe&lt;/td&gt;
      &lt;td&gt;This is a binary provided by Microsoft and is used to create the Windows Service.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;configuration-files&quot;&gt;Configuration Files&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;File&lt;/th&gt;
      &lt;th&gt;Description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;config.lua&lt;/td&gt;
      &lt;td&gt;The main configuration file used by the EMS. The contents of this file are detailed later in this document.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;webconfig.lua&lt;/td&gt;
      &lt;td&gt;The EvoStream Web Server (EWS) configuration file. The contents of this file are detailed later in this document.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;users.lua&lt;/td&gt;
      &lt;td&gt;Defines the valid authentication the server will require when streams are pushed into the EMS.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;pushPullSetup.xml&lt;/td&gt;
      &lt;td&gt;This file is used by the EMS to store stream action commands that are made through the Runtime API. This file may not be modified. At startup, if the EMS detects that the file has been modified it will rename the file and start with a blank/fresh copy.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;connlimits.xml&lt;/td&gt;
      &lt;td&gt;Defines the maximum number of concurrent connections you want the EMS to accept&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;bandwidthlimits.xml&lt;/td&gt;
      &lt;td&gt;Defines the maximum amount of bandwidth you want the server to be able to use (set the instantaneous bandwidth cap).&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;documentation&quot;&gt;Documentation&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;File&lt;/th&gt;
      &lt;th&gt;Description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;EvoStream Media Server EULA v2.pdf&lt;/td&gt;
      &lt;td&gt;The End User License Agreement for the EMS&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;miscellaneous&quot;&gt;Miscellaneous&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;File&lt;/th&gt;
      &lt;th&gt;Description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;demo/emsdemo.htmldemo/base64.js&lt;/td&gt;
      &lt;td&gt;The emsdemo.html file can be opened directly in a web browser and provides some example commands which can be sent to the EMS.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;media/&lt;/td&gt;
      &lt;td&gt;The media directory is the default location for video-on-demand files. This is where the EMS will look when VOD requests are made. This default location can be changed in the EMS main configuration file, which is typically &lt;code class=&quot;highlighter-rouge&quot;&gt;config/config.lua&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;logs/&lt;/td&gt;
      &lt;td&gt;This is the directory that EMS will write its logs to. This default location can be changed in the EMS main configuration file, which is typically &lt;code class=&quot;highlighter-rouge&quot;&gt;config/config.lua&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;License.lic&lt;/td&gt;
      &lt;td&gt;This is the license file required to run the EMS. It can be placed in the &lt;code class=&quot;highlighter-rouge&quot;&gt;config/&lt;/code&gt; , &lt;code class=&quot;highlighter-rouge&quot;&gt;bin/&lt;/code&gt; , or &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/evostreamms/&lt;/code&gt; folders, or in whatever folder the evostreamms binary resides.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;evowebservices.log&lt;/td&gt;
      &lt;td&gt;This is an auto-generated file which contains the logs for the evowebservices. The file will be placed in &lt;code class=&quot;highlighter-rouge&quot;&gt;../evo-webroot/evowebservices&lt;/code&gt;.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
</description>
        <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
        <link>http://docs.evostream.com/ems_user_guide/installation</link>
        <guid isPermaLink="true">http://docs.evostream.com/ems_user_guide/installation</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
  </channel>
</rss>
